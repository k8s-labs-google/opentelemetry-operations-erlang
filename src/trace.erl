%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.8.0
-module(trace).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'/1, 'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'/1]).
-export(['enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.Link.Type'/1, 'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.Link.Type'/1]).
-export(['enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'/1, 'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("trace.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'() :: 'TYPE_UNSPECIFIED' | 'SENT' | 'RECEIVED'.
-type 'google.devtools.cloudtrace.v2.Span.Link.Type'() :: 'TYPE_UNSPECIFIED' | 'CHILD_LINKED_SPAN' | 'PARENT_LINKED_SPAN'.
-type 'google.devtools.cloudtrace.v2.Span.SpanKind'() :: 'SPAN_KIND_UNSPECIFIED' | 'INTERNAL' | 'SERVER' | 'CLIENT' | 'PRODUCER' | 'CONSUMER'.
-export_type(['google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'/0, 'google.devtools.cloudtrace.v2.Span.Link.Type'/0, 'google.devtools.cloudtrace.v2.Span.SpanKind'/0]).

%% message types
-type 'google.devtools.cloudtrace.v2.Span.Attributes'() :: #'google.devtools.cloudtrace.v2.Span.Attributes'{}.

-type 'google.devtools.cloudtrace.v2.Span.TimeEvent'() :: #'google.devtools.cloudtrace.v2.Span.TimeEvent'{}.

-type 'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'() :: #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{}.

-type 'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'() :: #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{}.

-type 'google.devtools.cloudtrace.v2.Span.TimeEvents'() :: #'google.devtools.cloudtrace.v2.Span.TimeEvents'{}.

-type 'google.devtools.cloudtrace.v2.Span.Link'() :: #'google.devtools.cloudtrace.v2.Span.Link'{}.

-type 'google.devtools.cloudtrace.v2.Span.Links'() :: #'google.devtools.cloudtrace.v2.Span.Links'{}.

-type 'google.devtools.cloudtrace.v2.Span'() :: #'google.devtools.cloudtrace.v2.Span'{}.

-type 'google.devtools.cloudtrace.v2.AttributeValue'() :: #'google.devtools.cloudtrace.v2.AttributeValue'{}.

-type 'google.devtools.cloudtrace.v2.StackTrace.StackFrame'() :: #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{}.

-type 'google.devtools.cloudtrace.v2.StackTrace.StackFrames'() :: #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{}.

-type 'google.devtools.cloudtrace.v2.StackTrace'() :: #'google.devtools.cloudtrace.v2.StackTrace'{}.

-type 'google.devtools.cloudtrace.v2.Module'() :: #'google.devtools.cloudtrace.v2.Module'{}.

-type 'google.devtools.cloudtrace.v2.TruncatableString'() :: #'google.devtools.cloudtrace.v2.TruncatableString'{}.

-type 'google.protobuf.Timestamp'() :: #'google.protobuf.Timestamp'{}.

-export_type(['google.devtools.cloudtrace.v2.Span.Attributes'/0, 'google.devtools.cloudtrace.v2.Span.TimeEvent'/0, 'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'/0, 'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'/0, 'google.devtools.cloudtrace.v2.Span.TimeEvents'/0, 'google.devtools.cloudtrace.v2.Span.Link'/0, 'google.devtools.cloudtrace.v2.Span.Links'/0, 'google.devtools.cloudtrace.v2.Span'/0, 'google.devtools.cloudtrace.v2.AttributeValue'/0, 'google.devtools.cloudtrace.v2.StackTrace.StackFrame'/0, 'google.devtools.cloudtrace.v2.StackTrace.StackFrames'/0, 'google.devtools.cloudtrace.v2.StackTrace'/0, 'google.devtools.cloudtrace.v2.Module'/0, 'google.devtools.cloudtrace.v2.TruncatableString'/0, 'google.protobuf.Timestamp'/0]).

-record('map<string,google.devtools.cloudtrace.v2.AttributeValue>',{key, value}).
-spec encode_msg(#'google.devtools.cloudtrace.v2.Span.Attributes'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvents'{} | #'google.devtools.cloudtrace.v2.Span.Link'{} | #'google.devtools.cloudtrace.v2.Span.Links'{} | #'google.devtools.cloudtrace.v2.Span'{} | #'google.devtools.cloudtrace.v2.AttributeValue'{} | #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{} | #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{} | #'google.devtools.cloudtrace.v2.StackTrace'{} | #'google.devtools.cloudtrace.v2.Module'{} | #'google.devtools.cloudtrace.v2.TruncatableString'{} | #'google.protobuf.Timestamp'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'google.devtools.cloudtrace.v2.Span.Attributes'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvents'{} | #'google.devtools.cloudtrace.v2.Span.Link'{} | #'google.devtools.cloudtrace.v2.Span.Links'{} | #'google.devtools.cloudtrace.v2.Span'{} | #'google.devtools.cloudtrace.v2.AttributeValue'{} | #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{} | #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{} | #'google.devtools.cloudtrace.v2.StackTrace'{} | #'google.devtools.cloudtrace.v2.Module'{} | #'google.devtools.cloudtrace.v2.TruncatableString'{} | #'google.protobuf.Timestamp'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'google.devtools.cloudtrace.v2.Span.Attributes'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{} | #'google.devtools.cloudtrace.v2.Span.TimeEvents'{} | #'google.devtools.cloudtrace.v2.Span.Link'{} | #'google.devtools.cloudtrace.v2.Span.Links'{} | #'google.devtools.cloudtrace.v2.Span'{} | #'google.devtools.cloudtrace.v2.AttributeValue'{} | #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{} | #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{} | #'google.devtools.cloudtrace.v2.StackTrace'{} | #'google.devtools.cloudtrace.v2.Module'{} | #'google.devtools.cloudtrace.v2.TruncatableString'{} | #'google.protobuf.Timestamp'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'google.devtools.cloudtrace.v2.Span.Attributes' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(id(Msg,
									TrUserData),
								     TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(id(Msg,
								       TrUserData),
								    TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(id(Msg,
										    TrUserData),
										 TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(id(Msg,
										  TrUserData),
									       TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvents' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(id(Msg,
									TrUserData),
								     TrUserData);
      'google.devtools.cloudtrace.v2.Span.Link' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.Link'(id(Msg,
								  TrUserData),
							       TrUserData);
      'google.devtools.cloudtrace.v2.Span.Links' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span.Links'(id(Msg,
								   TrUserData),
								TrUserData);
      'google.devtools.cloudtrace.v2.Span' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Span'(id(Msg,
							     TrUserData),
							  TrUserData);
      'google.devtools.cloudtrace.v2.AttributeValue' ->
	  'encode_msg_google.devtools.cloudtrace.v2.AttributeValue'(id(Msg,
								       TrUserData),
								    TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace.StackFrame' ->
	  'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(id(Msg,
									      TrUserData),
									   TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace.StackFrames' ->
	  'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(id(Msg,
									       TrUserData),
									    TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace' ->
	  'encode_msg_google.devtools.cloudtrace.v2.StackTrace'(id(Msg,
								   TrUserData),
								TrUserData);
      'google.devtools.cloudtrace.v2.Module' ->
	  'encode_msg_google.devtools.cloudtrace.v2.Module'(id(Msg,
							       TrUserData),
							    TrUserData);
      'google.devtools.cloudtrace.v2.TruncatableString' ->
	  'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(id(Msg,
									  TrUserData),
								       TrUserData);
      'google.protobuf.Timestamp' ->
	  'encode_msg_google.protobuf.Timestamp'(id(Msg,
						    TrUserData),
						 TrUserData)
    end.


'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Msg,
							   TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Msg,
							       <<>>,
							       TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(#'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
														=
														F1,
													    dropped_attributes_count
														=
														F2},
							   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(TrF1,
											Bin,
											TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Msg,
							  TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Msg,
							      <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(#'google.devtools.cloudtrace.v2.Span.TimeEvent'{time
													      =
													      F1,
													  value
													      =
													      F2},
							  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(TrF1,
										      <<Bin/binary,
											10>>,
										      TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {annotation, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(TrTF2,
										      <<B1/binary,
											18>>,
										      TrUserData)
		 end;
	     {message_event, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(TrTF2,
											 <<B1/binary,
											   26>>,
											 TrUserData)
		 end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Msg,
								       TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Msg,
									   <<>>,
									   TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(#'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
																	=
																	F1,
																    id
																	=
																	F2,
																    uncompressed_size_bytes
																	=
																	F3,
																    compressed_size_bytes
																	=
																	F4},
								       Bin,
								       TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'TYPE_UNSPECIFIED'; TrF1 =:= 0 -> Bin;
		     true ->
			 'e_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(TrF1,
												 <<Bin/binary,
												   8>>,
												 TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true ->
		    e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Msg,
								     TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Msg,
									 <<>>,
									 TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(#'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
																    =
																    F1,
																attributes
																    =
																    F2},
								     Bin,
								     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(TrF1,
													<<Bin/binary,
													  10>>,
													TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(TrF2,
												  <<B1/binary,
												    18>>,
												  TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Msg,
							   TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Msg,
							       <<>>,
							       TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(#'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
														=
														F1,
													    dropped_annotations_count
														=
														F2,
													    dropped_message_events_count
														=
														F3},
							   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(TrF1,
										     Bin,
										     TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true ->
		    e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span.Link'(Msg,
						     TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.Link'(Msg,
							 <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.Link'(#'google.devtools.cloudtrace.v2.Span.Link'{trace_id
												    =
												    F1,
												span_id
												    =
												    F2,
												type
												    =
												    F3,
												attributes
												    =
												    F4},
						     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 'TYPE_UNSPECIFIED'; TrF3 =:= 0 -> B2;
		     true ->
			 'e_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(TrF3,
									       <<B2/binary,
										 24>>,
									       TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= undefined -> B3;
		true ->
		    'e_mfield_google.devtools.cloudtrace.v2.Span.Link_attributes'(TrF4,
										  <<B3/binary,
										    34>>,
										  TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span.Links'(Msg,
						      TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span.Links'(Msg,
							  <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span.Links'(#'google.devtools.cloudtrace.v2.Span.Links'{link
												      =
												      F1,
												  dropped_links_count
												      =
												      F2},
						      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_google.devtools.cloudtrace.v2.Span.Links_link'(TrF1,
									  Bin,
									  TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Span'(Msg,
						TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Span'(Msg,
						    <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Span'(#'google.devtools.cloudtrace.v2.Span'{name
											  =
											  F1,
										      span_id
											  =
											  F2,
										      parent_span_id
											  =
											  F3,
										      display_name
											  =
											  F4,
										      start_time
											  =
											  F5,
										      end_time
											  =
											  F6,
										      attributes
											  =
											  F7,
										      stack_trace
											  =
											  F8,
										      time_events
											  =
											  F9,
										      links
											  =
											  F10},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span_display_name'(TrF4,
										    <<B3/binary,
										      34>>,
										    TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span_start_time'(TrF5,
										  <<B4/binary,
										    42>>,
										  TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span_end_time'(TrF6,
										<<B5/binary,
										  50>>,
										TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span_attributes'(TrF7,
										  <<B6/binary,
										    58>>,
										  TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= undefined -> B7;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span_stack_trace'(TrF8,
										   <<B7/binary,
										     66>>,
										   TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= undefined -> B8;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Span_time_events'(TrF9,
										   <<B8/binary,
										     74>>,
										   TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     if TrF10 =:= undefined -> B9;
		true ->
		    'e_mfield_google.devtools.cloudtrace.v2.Span_links'(TrF10,
									<<B9/binary,
									  82>>,
									TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.AttributeValue'(Msg,
							  TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.AttributeValue'(Msg,
							      <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.AttributeValue'(#'google.devtools.cloudtrace.v2.AttributeValue'{value
													      =
													      F1},
							  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {string_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_google.devtools.cloudtrace.v2.AttributeValue_string_value'(TrTF1,
											<<Bin/binary,
											  10>>,
											TrUserData)
		 end;
	     {int_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_int64(TrTF1, <<Bin/binary, 16>>, TrUserData)
		 end;
	     {bool_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bool(TrTF1, <<Bin/binary, 24>>, TrUserData)
		 end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Msg,
								 TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Msg,
								     <<>>,
								     TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(#'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
															    =
															    F1,
															original_function_name
															    =
															    F2,
															file_name
															    =
															    F3,
															line_number
															    =
															    F4,
															column_number
															    =
															    F5,
															load_module
															    =
															    F6,
															source_version
															    =
															    F7},
								 Bin,
								 TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(TrF1,
												      <<Bin/binary,
													10>>,
												      TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(TrF2,
													       <<B1/binary,
														 18>>,
													       TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(TrF3,
												  <<B2/binary,
												    26>>,
												  TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true ->
			 e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(TrF6,
												    <<B5/binary,
												      50>>,
												    TrUserData)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= undefined -> B6;
		true ->
		    'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(TrF7,
												  <<B6/binary,
												    58>>,
												  TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Msg,
								  TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Msg,
								      <<>>,
								      TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(#'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
															      =
															      F1,
															  dropped_frames_count
															      =
															      F2},
								  Bin,
								  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(TrF1,
										       Bin,
										       TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.StackTrace'(Msg,
						      TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.StackTrace'(Msg,
							  <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.StackTrace'(#'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
												      =
												      F1,
												  stack_trace_hash_id
												      =
												      F2},
						      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(TrF1,
											  <<Bin/binary,
											    10>>,
											  TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.Module'(Msg,
						  TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.Module'(Msg,
						      <<>>, TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.Module'(#'google.devtools.cloudtrace.v2.Module'{module
											      =
											      F1,
											  build_id
											      =
											      F2},
						  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_google.devtools.cloudtrace.v2.Module_module'(TrF1,
										<<Bin/binary,
										  10>>,
										TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_google.devtools.cloudtrace.v2.Module_build_id'(TrF2,
									     <<B1/binary,
									       18>>,
									     TrUserData)
	     end
	   end
    end.

'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
							     TrUserData) ->
    'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								 <<>>,
								 TrUserData).


'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(#'google.devtools.cloudtrace.v2.TruncatableString'{value
														    =
														    F1,
														truncated_byte_count
														    =
														    F2},
							     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_google.protobuf.Timestamp'(Msg,
				       TrUserData) ->
    'encode_msg_google.protobuf.Timestamp'(Msg, <<>>,
					   TrUserData).


'encode_msg_google.protobuf.Timestamp'(#'google.protobuf.Timestamp'{seconds
									= F1,
								    nanos = F2},
				       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'e_mfield_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin =
	'encode_msg_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Msg,
									      <<>>,
									      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'([Elem
								       | Rest],
								      Bin,
								      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'('tr_encode_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map[x]'(Elem,
																			  TrUserData),
									       Bin2,
									       TrUserData),
    'e_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(Rest,
									  Bin3,
									  TrUserData);
'e_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'([],
								      Bin,
								      _TrUserData) ->
    Bin.

'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(Msg,
							     Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(Msg,
								   Bin,
								   TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Msg,
									     <<>>,
									     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(Msg,
								      Bin,
								      TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Msg,
									       <<>>,
									       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(Msg,
									       Bin,
									       TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(Msg,
									      Bin,
									      TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Msg,
								   <<>>,
								   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Msg,
								  <<>>,
								  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'([Elem
								    | Rest],
								   Bin,
								   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(id(Elem,
									       TrUserData),
									    Bin2,
									    TrUserData),
    'e_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(Rest,
								       Bin3,
								       TrUserData);
'e_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'([],
								   Bin,
								   _TrUserData) ->
    Bin.

'e_mfield_google.devtools.cloudtrace.v2.Span.Link_attributes'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Msg,
								   <<>>,
								   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span.Links_link'(Msg,
							 Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.Link'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_google.devtools.cloudtrace.v2.Span.Links_link'([Elem
							 | Rest],
							Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_google.devtools.cloudtrace.v2.Span.Links_link'(id(Elem,
								    TrUserData),
								 Bin2,
								 TrUserData),
    'e_field_google.devtools.cloudtrace.v2.Span.Links_link'(Rest,
							    Bin3, TrUserData);
'e_field_google.devtools.cloudtrace.v2.Span.Links_link'([],
							Bin, _TrUserData) ->
    Bin.

'e_mfield_google.devtools.cloudtrace.v2.Span_display_name'(Msg,
							   Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span_start_time'(Msg,
							 Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span_end_time'(Msg,
						       Bin, TrUserData) ->
    SubBin = 'encode_msg_google.protobuf.Timestamp'(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span_attributes'(Msg,
							 Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Msg,
								   <<>>,
								   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span_stack_trace'(Msg,
							  Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.StackTrace'(Msg,
							      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span_time_events'(Msg,
							  Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Msg,
								   <<>>,
								   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Span_links'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Span.Links'(Msg,
							      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.AttributeValue_string_value'(Msg,
								     Bin,
								     TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(Msg,
									     Bin,
									     TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(Msg,
										      Bin,
										      TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(Msg,
									 Bin,
									 TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(Msg,
									   Bin,
									   TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.Module'(Msg,
							  <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(Msg,
									      Bin,
									      TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(Msg,
								      Bin,
								      TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Msg,
									 <<>>,
									 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'([Elem
								      | Rest],
								     Bin,
								     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(id(Elem,
										 TrUserData),
									      Bin2,
									      TrUserData),
    'e_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(Rest,
									 Bin3,
									 TrUserData);
'e_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'([],
								     Bin,
								     _TrUserData) ->
    Bin.

'e_mfield_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(Msg,
								 Bin,
								 TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Msg,
									  <<>>,
									  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Module_module'(Msg,
						       Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_google.devtools.cloudtrace.v2.Module_build_id'(Msg,
							 Bin, TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'encode_msg_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(#'map<string,google.devtools.cloudtrace.v2.AttributeValue>'{key
																      =
																      F1,
																  value
																      =
																      F2},
								      Bin,
								      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(TrF2,
										<<B1/binary,
										  18>>,
										TrUserData)
    end.

'e_mfield_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(Msg,
									  Bin,
									  TrUserData) ->
    SubBin =
	'encode_msg_google.devtools.cloudtrace.v2.AttributeValue'(Msg,
								  <<>>,
								  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('TYPE_UNSPECIFIED',
									Bin,
									_TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('SENT',
									Bin,
									_TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('RECEIVED',
									Bin,
									_TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(V,
									Bin,
									_TrUserData) ->
    e_varint(V, Bin).

'e_enum_google.devtools.cloudtrace.v2.Span.Link.Type'('TYPE_UNSPECIFIED',
						      Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_google.devtools.cloudtrace.v2.Span.Link.Type'('CHILD_LINKED_SPAN',
						      Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_google.devtools.cloudtrace.v2.Span.Link.Type'('PARENT_LINKED_SPAN',
						      Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(V,
						      Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.Attributes',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Bin,
								  TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.TimeEvent',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Bin,
								 TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Bin,
									      TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Bin,
									    TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.TimeEvents',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Bin,
								  TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.Link',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.Link'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span.Links',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span.Links'(Bin,
							     TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Span',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Span'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.AttributeValue',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.AttributeValue'(Bin,
								 TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.StackTrace.StackFrame',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Bin,
									TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.StackTrace.StackFrames',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Bin,
									 TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.StackTrace',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.StackTrace'(Bin,
							     TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.Module',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.Module'(Bin,
							 TrUserData),
       TrUserData);
decode_msg_2_doit('google.devtools.cloudtrace.v2.TruncatableString',
		  Bin, TrUserData) ->
    id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bin,
								    TrUserData),
       TrUserData);
decode_msg_2_doit('google.protobuf.Timestamp', Bin,
		  TrUserData) ->
    id('decode_msg_google.protobuf.Timestamp'(Bin,
					      TrUserData),
       TrUserData).



'decode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Bin,
							   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Bin,
								       0, 0,
								       'tr_decode_init_default_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'([],
																			    TrUserData),
								       id(0,
									  TrUserData),
								       TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(<<10,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(<<16,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Attributes_dropped_attributes_count'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(<<>>,
								   0, 0, R1,
								   F@_2,
								   TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
							 =
							 'tr_decode_repeated_finalize_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(R1,
																		   TrUserData),
						     dropped_attributes_count =
							 F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Other,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Other,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2,
								  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2,
								  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Attributes_dropped_attributes_count'(Rest,
											   0,
											   0,
											   F@_1,
											   F@_2,
											   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
									   Key
									     bsr
									     3,
									   0,
									   F@_1,
									   F@_2,
									   TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(<<>>,
								  0, 0, R1,
								  F@_2,
								  TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
							 =
							 'tr_decode_repeated_finalize_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(R1,
																		   TrUserData),
						     dropped_attributes_count =
							 F@_2}.

'd_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Attributes_attribute_map'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      Prev,
								      F@_2,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Bs,
												     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(RestF,
								       0, 0,
								       'tr_decode_repeated_add_elem_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(NewFValue,
																				 Prev,
																				 TrUserData),
								       F@_2,
								       TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.Attributes_dropped_attributes_count'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Attributes_dropped_attributes_count'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Attributes_dropped_attributes_count'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 _,
										 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(RestF,
								       0, 0,
								       F@_1,
								       NewFValue,
								       TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.Attributes'(<<1:1,
							      _:7,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.Attributes'(<<0:1,
							      _:7,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Attributes'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Attributes'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Rest2,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.Attributes'(Bin,
							   FNum, Z2, F@_1, F@_2,
							   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
								       0, Z2,
								       F@_1,
								       F@_2,
								       TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.Attributes'(<<_:32,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.Attributes'(<<_:64,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Attributes'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Bin,
							  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Bin,
								      0, 0,
								      id(undefined,
									 TrUserData),
								      id(undefined,
									 TrUserData),
								      TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<10,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<18,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<26,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<>>,
								  0, 0, F@_1,
								  F@_2, _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent'{time =
							F@_1,
						    value = F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Other,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Other,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      18 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    TrUserData);
      26 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
										     0,
										     0,
										     F@_1,
										     F@_2,
										     TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
									  Key
									    bsr
									    3,
									  0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<>>,
								 0, 0, F@_1,
								 F@_2, _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent'{time =
							F@_1,
						    value = F@_2}.

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_time'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, Prev, F@_2,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.protobuf.Timestamp'(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(RestF,
								      0, 0,
								      if Prev ==
									   undefined ->
									     NewFValue;
									 true ->
									     'merge_msg_google.protobuf.Timestamp'(Prev,
														   NewFValue,
														   TrUserData)
								      end,
								      F@_2,
								      TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2,
								  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_annotation'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  Prev,
								  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Bs,
												    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(RestF,
								      0, 0,
								      F@_1,
								      case Prev
									  of
									undefined ->
									    id({annotation,
										NewFValue},
									       TrUserData);
									{annotation,
									 MVPrev} ->
									    id({annotation,
										'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(MVPrev,
																		    NewFValue,
																		    TrUserData)},
									       TrUserData);
									_ ->
									    id({annotation,
										NewFValue},
									       TrUserData)
								      end,
								      TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent_message_event'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Bs,
												      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(RestF,
								      0, 0,
								      F@_1,
								      case Prev
									  of
									undefined ->
									    id({message_event,
										NewFValue},
									       TrUserData);
									{message_event,
									 MVPrev} ->
									    id({message_event,
										'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(MVPrev,
																		      NewFValue,
																		      TrUserData)},
									       TrUserData);
									_ ->
									    id({message_event,
										NewFValue},
									       TrUserData)
								      end,
								      TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<1:1,
							     _:7, Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<0:1,
							     _:7, Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest2,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvent'(Bin,
							  FNum, Z2, F@_1, F@_2,
							  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								      0, Z2,
								      F@_1,
								      F@_2,
								      TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<_:32,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvent'(<<_:64,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Bin,
								       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Bin,
										   0,
										   0,
										   id('TYPE_UNSPECIFIED',
										      TrUserData),
										   id(0,
										      TrUserData),
										   id(0,
										      TrUserData),
										   id(0,
										      TrUserData),
										   TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<8,
										 Rest/binary>>,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_type'(Rest,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<16,
										 Rest/binary>>,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_id'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<24,
										 Rest/binary>>,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_uncompressed_size_bytes'(Rest,
												Z1,
												Z2,
												F@_1,
												F@_2,
												F@_3,
												F@_4,
												TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<32,
										 Rest/binary>>,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_compressed_size_bytes'(Rest,
											      Z1,
											      Z2,
											      F@_1,
											      F@_2,
											      F@_3,
											      F@_4,
											      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<>>,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
								     = F@_1,
								 id = F@_2,
								 uncompressed_size_bytes
								     = F@_3,
								 compressed_size_bytes
								     = F@_4};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Other,
									       Z1,
									       Z2,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Other,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  F@_3,
										  F@_4,
										  TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<1:1,
										X:7,
										Rest/binary>>,
									      N,
									      Acc,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										  N
										    +
										    7,
										  X
										    bsl
										    N
										    +
										    Acc,
										  F@_1,
										  F@_2,
										  F@_3,
										  F@_4,
										  TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<0:1,
										X:7,
										Rest/binary>>,
									      N,
									      Acc,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_type'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_id'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 TrUserData);
      24 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_uncompressed_size_bytes'(Rest,
												      0,
												      0,
												      F@_1,
												      F@_2,
												      F@_3,
												      F@_4,
												      TrUserData);
      32 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_compressed_size_bytes'(Rest,
												    0,
												    0,
												    F@_1,
												    F@_2,
												    F@_3,
												    F@_4,
												    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
											0,
											0,
											F@_1,
											F@_2,
											F@_3,
											F@_4,
											TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    F@_3,
										    F@_4,
										    TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
												  0,
												  0,
												  F@_1,
												  F@_2,
												  F@_3,
												  F@_4,
												  TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										       Key
											 bsr
											 3,
										       0,
										       F@_1,
										       F@_2,
										       F@_3,
										       F@_4,
										       TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    F@_3,
										    F@_4,
										    TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<>>,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
								     = F@_1,
								 id = F@_2,
								 uncompressed_size_bytes
								     = F@_3,
								 compressed_size_bytes
								     = F@_4}.

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_type'(<<1:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_type'(Rest,
									     N +
									       7,
									     X
									       bsl
									       N
									       +
									       Acc,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_type'(<<0:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 _,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(begin
										      <<Res:32/signed-native>> =
											  <<(X
											       bsl
											       N
											       +
											       Acc):32/unsigned-native>>,
										      id(Res,
											 TrUserData)
										    end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(RestF,
										   0,
										   0,
										   NewFValue,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_id'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_id'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_id'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1, _,
								       F@_3,
								       F@_4,
								       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(RestF,
										   0,
										   0,
										   F@_1,
										   NewFValue,
										   F@_3,
										   F@_4,
										   TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_uncompressed_size_bytes'(<<1:1,
											      X:7,
											      Rest/binary>>,
											    N,
											    Acc,
											    F@_1,
											    F@_2,
											    F@_3,
											    F@_4,
											    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_uncompressed_size_bytes'(Rest,
												N
												  +
												  7,
												X
												  bsl
												  N
												  +
												  Acc,
												F@_1,
												F@_2,
												F@_3,
												F@_4,
												TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_uncompressed_size_bytes'(<<0:1,
											      X:7,
											      Rest/binary>>,
											    N,
											    Acc,
											    F@_1,
											    F@_2,
											    _,
											    F@_4,
											    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(RestF,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   NewFValue,
										   F@_4,
										   TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_compressed_size_bytes'(<<1:1,
											    X:7,
											    Rest/binary>>,
											  N,
											  Acc,
											  F@_1,
											  F@_2,
											  F@_3,
											  F@_4,
											  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_compressed_size_bytes'(Rest,
											      N
												+
												7,
											      X
												bsl
												N
												+
												Acc,
											      F@_1,
											      F@_2,
											      F@_3,
											      F@_4,
											      TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent_compressed_size_bytes'(<<0:1,
											    X:7,
											    Rest/binary>>,
											  N,
											  Acc,
											  F@_1,
											  F@_2,
											  F@_3,
											  _,
											  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(RestF,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   F@_3,
										   NewFValue,
										   TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<1:1,
									  _:7,
									  Rest/binary>>,
									Z1, Z2,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
									    Z1,
									    Z2,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<0:1,
									  _:7,
									  Rest/binary>>,
									Z1, Z2,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<1:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  F@_2,
										  F@_3,
										  F@_4,
										  TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										      N
											+
											7,
										      X
											bsl
											N
											+
											Acc,
										      F@_1,
										      F@_2,
										      F@_3,
										      F@_4,
										      TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<0:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  F@_2,
										  F@_3,
										  F@_4,
										  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest2,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Bin,
								       FNum, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										   0,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<_:32,
								      Rest/binary>>,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(<<_:64,
								      Rest/binary>>,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Bin,
								     TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Bin,
										 0,
										 0,
										 id(undefined,
										    TrUserData),
										 id(undefined,
										    TrUserData),
										 TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<10,
									       Rest/binary>>,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(Rest,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<18,
									       Rest/binary>>,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(Rest,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<>>,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
								   = F@_1,
							       attributes =
								   F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Other,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Other,
										Z1,
										Z2,
										F@_1,
										F@_2,
										TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<1:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										N
										  +
										  7,
										X
										  bsl
										  N
										  +
										  Acc,
										F@_1,
										F@_2,
										TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<0:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(Rest,
											0,
											0,
											F@_1,
											F@_2,
											TrUserData);
      18 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
												0,
												0,
												F@_1,
												F@_2,
												TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										     Key
										       bsr
										       3,
										     0,
										     F@_1,
										     F@_2,
										     TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<>>,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
								   = F@_1,
							       attributes =
								   F@_2}.

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(<<1:1,
										X:7,
										Rest/binary>>,
									      N,
									      Acc,
									      F@_1,
									      F@_2,
									      TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(Rest,
										  N
										    +
										    7,
										  X
										    bsl
										    N
										    +
										    Acc,
										  F@_1,
										  F@_2,
										  TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_description'(<<0:1,
										X:7,
										Rest/binary>>,
									      N,
									      Acc,
									      Prev,
									      F@_2,
									      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(RestF,
										 0,
										 0,
										 if
										   Prev
										     ==
										     undefined ->
										       NewFValue;
										   true ->
										       'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																		   NewFValue,
																		   TrUserData)
										 end,
										 F@_2,
										 TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(<<1:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(Rest,
										 N
										   +
										   7,
										 X
										   bsl
										   N
										   +
										   Acc,
										 F@_1,
										 F@_2,
										 TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation_attributes'(<<0:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     Prev,
									     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Bs,
											  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(RestF,
										 0,
										 0,
										 F@_1,
										 if
										   Prev
										     ==
										     undefined ->
										       NewFValue;
										   true ->
										       'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Prev,
																		 NewFValue,
																		 TrUserData)
										 end,
										 TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<1:1,
									_:7,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<0:1,
									_:7,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<1:1,
										  X:7,
										  Rest/binary>>,
										N,
										Acc,
										F@_1,
										F@_2,
										TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										    N
										      +
										      7,
										    X
										      bsl
										      N
										      +
										      Acc,
										    F@_1,
										    F@_2,
										    TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<0:1,
										  X:7,
										  Rest/binary>>,
										N,
										Acc,
										F@_1,
										F@_2,
										TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest2,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Bin,
								     FNum, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										 0,
										 Z2,
										 F@_1,
										 F@_2,
										 TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<_:32,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(<<_:64,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Rest,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Bin,
							   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Bin,
								       0, 0,
								       id([],
									  TrUserData),
								       id(0,
									  TrUserData),
								       id(0,
									  TrUserData),
								       TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<10,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<16,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_annotations_count'(Rest,
										      Z1,
										      Z2,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<24,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_message_events_count'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<>>,
								   0, 0, R1,
								   F@_2, F@_3,
								   TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
							 =
							 lists_reverse(R1,
								       TrUserData),
						     dropped_annotations_count =
							 F@_2,
						     dropped_message_events_count
							 = F@_3};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Other,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Other,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_annotations_count'(Rest,
											    0,
											    0,
											    F@_1,
											    F@_2,
											    F@_3,
											    TrUserData);
      24 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_message_events_count'(Rest,
											       0,
											       0,
											       F@_1,
											       F@_2,
											       F@_3,
											       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
									   Key
									     bsr
									     3,
									   0,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<>>,
								  0, 0, R1,
								  F@_2, F@_3,
								  TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
							 =
							 lists_reverse(R1,
								       TrUserData),
						     dropped_annotations_count =
							 F@_2,
						     dropped_message_events_count
							 = F@_3}.

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_time_event'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, Prev,
								   F@_2, F@_3,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Bs,
											 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(RestF,
								       0, 0,
								       cons(NewFValue,
									    Prev,
									    TrUserData),
								       F@_2,
								       F@_3,
								       TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_annotations_count'(<<1:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  F@_2,
										  F@_3,
										  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_annotations_count'(Rest,
										      N
											+
											7,
										      X
											bsl
											N
											+
											Acc,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_annotations_count'(<<0:1,
										    X:7,
										    Rest/binary>>,
										  N,
										  Acc,
										  F@_1,
										  _,
										  F@_3,
										  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(RestF,
								       0, 0,
								       F@_1,
								       NewFValue,
								       F@_3,
								       TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_message_events_count'(<<1:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_message_events_count'(Rest,
											 N
											   +
											   7,
											 X
											   bsl
											   N
											   +
											   Acc,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.TimeEvents_dropped_message_events_count'(<<0:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     _,
										     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(RestF,
								       0, 0,
								       F@_1,
								       F@_2,
								       NewFValue,
								       TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<1:1,
							      _:7,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<0:1,
							      _:7,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest2,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.TimeEvents'(Bin,
							   FNum, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
								       0, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<_:32,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.TimeEvents'(<<_:64,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.TimeEvents'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span.Link'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Bin,
								 0, 0,
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 id('TYPE_UNSPECIFIED',
								    TrUserData),
								 id(undefined,
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<10,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_trace_id'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_span_id'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<24,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_type'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<34,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_attributes'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<>>,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, _) ->
    #'google.devtools.cloudtrace.v2.Span.Link'{trace_id =
						   F@_1,
					       span_id = F@_2, type = F@_3,
					       attributes = F@_4};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Other,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Link_trace_id'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData);
      18 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Link_span_id'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
      24 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Link_type'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
      34 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Link_attributes'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Link'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, _) ->
    #'google.devtools.cloudtrace.v2.Span.Link'{trace_id =
						   F@_1,
					       span_id = F@_2, type = F@_3,
					       attributes = F@_4}.

'd_field_google.devtools.cloudtrace.v2.Span.Link_trace_id'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_trace_id'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       F@_4,
							       TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Link_trace_id'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, _, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(RestF,
								 0, 0,
								 NewFValue,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.Link_span_id'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_span_id'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Link_span_id'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, _, F@_3,
							  F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(RestF,
								 0, 0, F@_1,
								 NewFValue,
								 F@_3, F@_4,
								 TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.Link_type'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_type'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Link_type'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, _,
						       F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(begin
								    <<Res:32/signed-native>> =
									<<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
								    id(Res,
								       TrUserData)
								  end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(RestF,
								 0, 0, F@_1,
								 F@_2,
								 NewFValue,
								 F@_4,
								 TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.Link_attributes'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Link_attributes'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Link_attributes'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Bs,
											  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 if Prev ==
								      undefined ->
									NewFValue;
								    true ->
									'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Prev,
																  NewFValue,
																  TrUserData)
								 end,
								 TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.Link'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.Link'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.Link'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Link'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Link'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Rest2,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.Link'(Bin,
						     FNum, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								 0, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.Link'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.Link'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Link'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span.Links'(Bin,
						      TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Bin,
								  0, 0,
								  id([],
								     TrUserData),
								  id(0,
								     TrUserData),
								  TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(<<10,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Links_link'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(<<16,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span.Links_dropped_links_count'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(<<>>,
							      0, 0, R1, F@_2,
							      TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Links'{link =
						    lists_reverse(R1,
								  TrUserData),
						dropped_links_count = F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Other,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Other,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Links_link'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.Span.Links_dropped_links_count'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Links'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								      Key bsr 3,
								      0, F@_1,
								      F@_2,
								      TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(<<>>,
							     0, 0, R1, F@_2,
							     TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Links'{link =
						    lists_reverse(R1,
								  TrUserData),
						dropped_links_count = F@_2}.

'd_field_google.devtools.cloudtrace.v2.Span.Links_link'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Links_link'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Links_link'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, Prev, F@_2,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.Link'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(RestF,
								  0, 0,
								  cons(NewFValue,
								       Prev,
								       TrUserData),
								  F@_2,
								  TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span.Links_dropped_links_count'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span.Links_dropped_links_count'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   F@_2,
									   TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span.Links_dropped_links_count'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1, _,
								       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(RestF,
								  0, 0, F@_1,
								  NewFValue,
								  TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span.Links'(<<1:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span.Links'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span.Links'(<<0:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Links'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span.Links'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Rest2,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span.Links'(Bin,
						      FNum, Z2, F@_1, F@_2,
						      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								  0, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span.Links'(<<_:32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span.Links'(<<_:64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span.Links'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Span'(Bin,
						TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Bin,
							    0, 0,
							    id([], TrUserData),
							    id([], TrUserData),
							    id([], TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<10,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_name'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10,
						      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<18,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_span_id'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<26,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_parent_span_id'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10,
								TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<34,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_display_name'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<42,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_start_time'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<50,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_end_time'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10,
							  TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<58,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_attributes'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<66,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_stack_trace'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10,
							     TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<74,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_time_events'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10,
							     TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<82,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Span_links'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(<<>>,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10, _) ->
    #'google.devtools.cloudtrace.v2.Span'{name = F@_1,
					  span_id = F@_2, parent_span_id = F@_3,
					  display_name = F@_4,
					  start_time = F@_5, end_time = F@_6,
					  attributes = F@_7, stack_trace = F@_8,
					  time_events = F@_9, links = F@_10};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span'(Other,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Span'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Span'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Span'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_name'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData);
      18 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_span_id'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       F@_6, F@_7, F@_8,
							       F@_9, F@_10,
							       TrUserData);
      26 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_parent_span_id'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      F@_9,
								      F@_10,
								      TrUserData);
      34 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_display_name'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    TrUserData);
      42 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_start_time'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10,
								  TrUserData);
      50 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_end_time'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10,
								TrUserData);
      58 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_attributes'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10,
								  TrUserData);
      66 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_stack_trace'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10,
								   TrUserData);
      74 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_time_events'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10,
								   TrUserData);
      82 ->
	  'd_field_google.devtools.cloudtrace.v2.Span_links'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Span'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10,
								 TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Span'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Span'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   F@_5,
									   F@_6,
									   F@_7,
									   F@_8,
									   F@_9,
									   F@_10,
									   TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Span'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								F@_3, F@_4,
								F@_5, F@_6,
								F@_7, F@_8,
								F@_9, F@_10,
								TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Span'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Span'(<<>>,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, _) ->
    #'google.devtools.cloudtrace.v2.Span'{name = F@_1,
					  span_id = F@_2, parent_span_id = F@_3,
					  display_name = F@_4,
					  start_time = F@_5, end_time = F@_6,
					  attributes = F@_7, stack_trace = F@_8,
					  time_events = F@_9, links = F@_10}.

'd_field_google.devtools.cloudtrace.v2.Span_name'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_name'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_name'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, NewFValue,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_span_id'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_span_id'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10,
							 TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_span_id'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, _, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1,
							    NewFValue, F@_3,
							    F@_4, F@_5, F@_6,
							    F@_7, F@_8, F@_9,
							    F@_10, TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_parent_span_id'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_parent_span_id'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								F@_5, F@_6,
								F@_7, F@_8,
								F@_9, F@_10,
								TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_parent_span_id'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    _, F@_4, F@_5, F@_6,
							    F@_7, F@_8, F@_9,
							    F@_10,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    NewFValue, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_display_name'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10,
							  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_display_name'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, F@_8, F@_9,
							      F@_10,
							      TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_display_name'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, Prev, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
															       NewFValue,
															       TrUserData)
							    end,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_start_time'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_start_time'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_start_time'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, Prev, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.protobuf.Timestamp'(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.protobuf.Timestamp'(Prev,
													 NewFValue,
													 TrUserData)
							    end,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_end_time'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10,
						      TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_end_time'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_end_time'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, Prev, F@_7,
						      F@_8, F@_9, F@_10,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.protobuf.Timestamp'(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.protobuf.Timestamp'(Prev,
													 NewFValue,
													 TrUserData)
							    end,
							    F@_7, F@_8, F@_9,
							    F@_10, TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_attributes'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_attributes'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_attributes'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							Prev, F@_8, F@_9, F@_10,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Bs,
											  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Prev,
															     NewFValue,
															     TrUserData)
							    end,
							    F@_8, F@_9, F@_10,
							    TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_stack_trace'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_stack_trace'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_stack_trace'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, Prev, F@_9,
							 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.StackTrace'(Bs,
										     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.devtools.cloudtrace.v2.StackTrace'(Prev,
															NewFValue,
															TrUserData)
							    end,
							    F@_9, F@_10,
							    TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_time_events'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_time_events'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_time_events'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, Prev,
							 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Bs,
											  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Prev,
															     NewFValue,
															     TrUserData)
							    end,
							    F@_10, TrUserData).

'd_field_google.devtools.cloudtrace.v2.Span_links'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Span_links'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Span_links'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Span.Links'(Bs,
										     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_google.devtools.cloudtrace.v2.Span.Links'(Prev,
															NewFValue,
															TrUserData)
							    end,
							    TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Span'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Span'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Span'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Span'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Span'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       F@_4, F@_5, F@_6,
							       F@_7, F@_8, F@_9,
							       F@_10,
							       TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Span'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Rest2,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Span'(Bin,
						FNum, Z2, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Rest,
							    0, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Span'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Span'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Span'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.AttributeValue'(Bin,
							  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Bin,
								      0, 0,
								      id(undefined,
									 TrUserData),
								      TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<10,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.AttributeValue_string_value'(Rest,
									Z1, Z2,
									F@_1,
									TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<16,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.AttributeValue_int_value'(Rest,
								     Z1, Z2,
								     F@_1,
								     TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<24,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.AttributeValue_bool_value'(Rest,
								      Z1, Z2,
								      F@_1,
								      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<>>,
								  0, 0, F@_1,
								  _) ->
    #'google.devtools.cloudtrace.v2.AttributeValue'{value =
							F@_1};
'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Other,
								  Z1, Z2, F@_1,
								  TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Other,
								     Z1, Z2,
								     F@_1,
								     TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1,
								     TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.AttributeValue_string_value'(Rest,
									      0,
									      0,
									      F@_1,
									      TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.AttributeValue_int_value'(Rest,
									   0, 0,
									   F@_1,
									   TrUserData);
      24 ->
	  'd_field_google.devtools.cloudtrace.v2.AttributeValue_bool_value'(Rest,
									    0,
									    0,
									    F@_1,
									    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
									   0, 0,
									   F@_1,
									   TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								       0, 0,
								       F@_1,
								       TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
										     0,
										     0,
										     F@_1,
										     TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
									  Key
									    bsr
									    3,
									  0,
									  F@_1,
									  TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								       0, 0,
								       F@_1,
								       TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(<<>>,
								 0, 0, F@_1,
								 _) ->
    #'google.devtools.cloudtrace.v2.AttributeValue'{value =
							F@_1}.

'd_field_google.devtools.cloudtrace.v2.AttributeValue_string_value'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1,
								    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.AttributeValue_string_value'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									TrUserData);
'd_field_google.devtools.cloudtrace.v2.AttributeValue_string_value'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    Prev,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(RestF,
								      0, 0,
								      case Prev
									  of
									undefined ->
									    id({string_value,
										NewFValue},
									       TrUserData);
									{string_value,
									 MVPrev} ->
									    id({string_value,
										'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(MVPrev,
																	    NewFValue,
																	    TrUserData)},
									       TrUserData);
									_ ->
									    id({string_value,
										NewFValue},
									       TrUserData)
								      end,
								      TrUserData).

'd_field_google.devtools.cloudtrace.v2.AttributeValue_int_value'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.AttributeValue_int_value'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1,
								     TrUserData);
'd_field_google.devtools.cloudtrace.v2.AttributeValue_int_value'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, _,
								 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(RestF,
								      0, 0,
								      id({int_value,
									  NewFValue},
									 TrUserData),
								      TrUserData).

'd_field_google.devtools.cloudtrace.v2.AttributeValue_bool_value'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.AttributeValue_bool_value'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      TrUserData);
'd_field_google.devtools.cloudtrace.v2.AttributeValue_bool_value'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, _,
								  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(RestF,
								      0, 0,
								      id({bool_value,
									  NewFValue},
									 TrUserData),
								      TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.AttributeValue'(<<1:1,
							     _:7, Rest/binary>>,
							   Z1, Z2, F@_1,
							   TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
							       Z1, Z2, F@_1,
							       TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.AttributeValue'(<<0:1,
							     _:7, Rest/binary>>,
							   Z1, Z2, F@_1,
							   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								      Z1, Z2,
								      F@_1,
								      TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.AttributeValue'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1,
								     TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.AttributeValue'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1,
								     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Rest2,
								      0, 0,
								      F@_1,
								      TrUserData).

'skip_group_google.devtools.cloudtrace.v2.AttributeValue'(Bin,
							  FNum, Z2, F@_1,
							  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								      0, Z2,
								      F@_1,
								      TrUserData).

'skip_32_google.devtools.cloudtrace.v2.AttributeValue'(<<_:32,
							 Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								      Z1, Z2,
								      F@_1,
								      TrUserData).

'skip_64_google.devtools.cloudtrace.v2.AttributeValue'(<<_:64,
							 Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.AttributeValue'(Rest,
								      Z1, Z2,
								      F@_1,
								      TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Bin,
								 TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Bin,
									     0,
									     0,
									     id(undefined,
										TrUserData),
									     id(undefined,
										TrUserData),
									     id(undefined,
										TrUserData),
									     id(0,
										TrUserData),
									     id(0,
										TrUserData),
									     id(undefined,
										TrUserData),
									     id(undefined,
										TrUserData),
									     TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<10,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(Rest,
										Z1,
										Z2,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										F@_7,
										TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<18,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(Rest,
											 Z1,
											 Z2,
											 F@_1,
											 F@_2,
											 F@_3,
											 F@_4,
											 F@_5,
											 F@_6,
											 F@_7,
											 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<26,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(Rest,
									    Z1,
									    Z2,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<32,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_line_number'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      F@_7,
									      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<40,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_column_number'(Rest,
										Z1,
										Z2,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										F@_7,
										TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<50,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      F@_7,
									      TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<58,
									   Rest/binary>>,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(Rest,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 F@_6,
										 F@_7,
										 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<>>,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 _) ->
    #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
							       = F@_1,
							   original_function_name
							       = F@_2,
							   file_name = F@_3,
							   line_number = F@_4,
							   column_number = F@_5,
							   load_module = F@_6,
							   source_version =
							       F@_7};
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Other,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 F@_7,
									 TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Other,
									    Z1,
									    Z2,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<1:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									    N +
									      7,
									    X
									      bsl
									      N
									      +
									      Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<0:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      F@_4,
										      F@_5,
										      F@_6,
										      F@_7,
										      TrUserData);
      18 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(Rest,
											       0,
											       0,
											       F@_1,
											       F@_2,
											       F@_3,
											       F@_4,
											       F@_5,
											       F@_6,
											       F@_7,
											       TrUserData);
      26 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(Rest,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  F@_3,
										  F@_4,
										  F@_5,
										  F@_6,
										  F@_7,
										  TrUserData);
      32 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_line_number'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    F@_3,
										    F@_4,
										    F@_5,
										    F@_6,
										    F@_7,
										    TrUserData);
      40 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_column_number'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      F@_4,
										      F@_5,
										      F@_6,
										      F@_7,
										      TrUserData);
      50 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    F@_3,
										    F@_4,
										    F@_5,
										    F@_6,
										    F@_7,
										    TrUserData);
      58 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       F@_3,
										       F@_4,
										       F@_5,
										       F@_6,
										       F@_7,
										       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  F@_3,
										  F@_4,
										  F@_5,
										  F@_6,
										  F@_7,
										  TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      F@_7,
									      TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
											    0,
											    0,
											    F@_1,
											    F@_2,
											    F@_3,
											    F@_4,
											    F@_5,
											    F@_6,
											    F@_7,
											    TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
										 Key
										   bsr
										   3,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 F@_6,
										 F@_7,
										 TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      F@_7,
									      TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<>>,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									_) ->
    #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
							       = F@_1,
							   original_function_name
							       = F@_2,
							   file_name = F@_3,
							   line_number = F@_4,
							   column_number = F@_5,
							   load_module = F@_6,
							   source_version =
							       F@_7}.

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(<<1:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(Rest,
										N
										  +
										  7,
										X
										  bsl
										  N
										  +
										  Acc,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										F@_7,
										TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_function_name'(<<0:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    Prev,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     if
									       Prev
										 ==
										 undefined ->
										   NewFValue;
									       true ->
										   'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																	       NewFValue,
																	       TrUserData)
									     end,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(<<1:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     F@_4,
										     F@_5,
										     F@_6,
										     F@_7,
										     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(Rest,
											 N
											   +
											   7,
											 X
											   bsl
											   N
											   +
											   Acc,
											 F@_1,
											 F@_2,
											 F@_3,
											 F@_4,
											 F@_5,
											 F@_6,
											 F@_7,
											 TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_original_function_name'(<<0:1,
										       X:7,
										       Rest/binary>>,
										     N,
										     Acc,
										     F@_1,
										     Prev,
										     F@_3,
										     F@_4,
										     F@_5,
										     F@_6,
										     F@_7,
										     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     F@_1,
									     if
									       Prev
										 ==
										 undefined ->
										   NewFValue;
									       true ->
										   'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																	       NewFValue,
																	       TrUserData)
									     end,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(<<1:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(Rest,
									    N +
									      7,
									    X
									      bsl
									      N
									      +
									      Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_file_name'(<<0:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									Prev,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     if
									       Prev
										 ==
										 undefined ->
										   NewFValue;
									       true ->
										   'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																	       NewFValue,
																	       TrUserData)
									     end,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_line_number'(<<1:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  F@_7,
									  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_line_number'(Rest,
									      N
										+
										7,
									      X
										bsl
										N
										+
										Acc,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      F@_7,
									      TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_line_number'(<<0:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  _,
									  F@_5,
									  F@_6,
									  F@_7,
									  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     NewFValue,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_column_number'(<<1:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_column_number'(Rest,
										N
										  +
										  7,
										X
										  bsl
										  N
										  +
										  Acc,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										F@_7,
										TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_column_number'(<<0:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    _,
									    F@_6,
									    F@_7,
									    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     NewFValue,
									     F@_6,
									     F@_7,
									     TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(<<1:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  F@_7,
									  TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(Rest,
									      N
										+
										7,
									      X
										bsl
										N
										+
										Acc,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      F@_5,
									      F@_6,
									      F@_7,
									      TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_load_module'(<<0:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  Prev,
									  F@_7,
									  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.Module'(Bs,
										 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     if
									       Prev
										 ==
										 undefined ->
										   NewFValue;
									       true ->
										   'merge_msg_google.devtools.cloudtrace.v2.Module'(Prev,
																    NewFValue,
																    TrUserData)
									     end,
									     F@_7,
									     TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(<<1:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(Rest,
										 N
										   +
										   7,
										 X
										   bsl
										   N
										   +
										   Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 F@_6,
										 F@_7,
										 TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrame_source_version'(<<0:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     Prev,
									     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(RestF,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     if
									       Prev
										 ==
										 undefined ->
										   NewFValue;
									       true ->
										   'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																	       NewFValue,
																	       TrUserData)
									     end,
									     TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<1:1,
								    _:7,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<0:1,
								    _:7,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<1:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
										N
										  +
										  7,
										X
										  bsl
										  N
										  +
										  Acc,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										F@_7,
										TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<0:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    F@_6,
									    F@_7,
									    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest2,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'skip_group_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Bin,
								 FNum, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									     0,
									     Z2,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'skip_32_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<_:32,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'skip_64_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(<<_:64,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Rest,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     F@_6,
									     F@_7,
									     TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Bin,
								  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Bin,
									      0,
									      0,
									      id([],
										 TrUserData),
									      id(0,
										 TrUserData),
									      TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<10,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<16,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_dropped_frames_count'(Rest,
											Z1,
											Z2,
											F@_1,
											F@_2,
											TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<>>,
									  0, 0,
									  R1,
									  F@_2,
									  TrUserData) ->
    #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
								=
								lists_reverse(R1,
									      TrUserData),
							    dropped_frames_count
								= F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Other,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Other,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<1:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									     N +
									       7,
									     X
									       bsl
									       N
									       +
									       Acc,
									     F@_1,
									     F@_2,
									     TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<0:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_dropped_frames_count'(Rest,
											      0,
											      0,
											      F@_1,
											      F@_2,
											      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
											     0,
											     0,
											     F@_1,
											     F@_2,
											     TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
										  Key
										    bsr
										    3,
										  0,
										  F@_1,
										  F@_2,
										  TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<>>,
									 0, 0,
									 R1,
									 F@_2,
									 TrUserData) ->
    #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
								=
								lists_reverse(R1,
									      TrUserData),
							    dropped_frames_count
								= F@_2}.

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_frame'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     Prev, F@_2,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Bs,
												TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(RestF,
									      0,
									      0,
									      cons(NewFValue,
										   Prev,
										   TrUserData),
									      F@_2,
									      TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_dropped_frames_count'(<<1:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_dropped_frames_count'(Rest,
											N
											  +
											  7,
											X
											  bsl
											  N
											  +
											  Acc,
											F@_1,
											F@_2,
											TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace.StackFrames_dropped_frames_count'(<<0:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    _,
										    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(RestF,
									      0,
									      0,
									      F@_1,
									      NewFValue,
									      TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<1:1,
								     _:7,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<0:1,
								     _:7,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<1:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
										 N
										   +
										   7,
										 X
										   bsl
										   N
										   +
										   Acc,
										 F@_1,
										 F@_2,
										 TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<0:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest2,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData).

'skip_group_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Bin,
								  FNum, Z2,
								  F@_1, F@_2,
								  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									      0,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData).

'skip_32_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<_:32,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData).

'skip_64_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(<<_:64,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.StackTrace'(Bin,
						      TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Bin,
								  0, 0,
								  id(undefined,
								     TrUserData),
								  id(0,
								     TrUserData),
								  TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(<<10,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(<<16,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_trace_hash_id'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(<<>>,
							      0, 0, F@_1, F@_2,
							      _) ->
    #'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
						    = F@_1,
						stack_trace_hash_id = F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Other,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Other,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_trace_hash_id'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								      Key bsr 3,
								      0, F@_1,
								      F@_2,
								      TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(<<>>,
							     0, 0, F@_1, F@_2,
							     _) ->
    #'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
						    = F@_1,
						stack_trace_hash_id = F@_2}.

'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_frames'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, Prev,
								F@_2,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Bs,
												 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(RestF,
								  0, 0,
								  if Prev ==
								       undefined ->
									 NewFValue;
								     true ->
									 'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Prev,
																	  NewFValue,
																	  TrUserData)
								  end,
								  F@_2,
								  TrUserData).

'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_trace_hash_id'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_trace_hash_id'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   F@_2,
									   TrUserData);
'd_field_google.devtools.cloudtrace.v2.StackTrace_stack_trace_hash_id'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1, _,
								       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(RestF,
								  0, 0, F@_1,
								  NewFValue,
								  TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.StackTrace'(<<1:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.StackTrace'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.StackTrace'(<<0:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.StackTrace'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Rest2,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData).

'skip_group_google.devtools.cloudtrace.v2.StackTrace'(Bin,
						      FNum, Z2, F@_1, F@_2,
						      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								  0, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_32_google.devtools.cloudtrace.v2.StackTrace'(<<_:32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_64_google.devtools.cloudtrace.v2.StackTrace'(<<_:64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.StackTrace'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.Module'(Bin,
						  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Bin,
							      0, 0,
							      id(undefined,
								 TrUserData),
							      id(undefined,
								 TrUserData),
							      TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(<<10,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Module_module'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(<<18,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.Module_build_id'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(<<>>,
							  0, 0, F@_1, F@_2,
							  _) ->
    #'google.devtools.cloudtrace.v2.Module'{module = F@_1,
					    build_id = F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Other,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Module'(Other,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.Module'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.Module'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.Module'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.Module_module'(Rest,
								0, 0, F@_1,
								F@_2,
								TrUserData);
      18 ->
	  'd_field_google.devtools.cloudtrace.v2.Module_build_id'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.Module'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.Module'(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.Module'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.Module'(Rest,
								  Key bsr 3, 0,
								  F@_1, F@_2,
								  TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.Module'(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.Module'(<<>>,
							 0, 0, F@_1, F@_2, _) ->
    #'google.devtools.cloudtrace.v2.Module'{module = F@_1,
					    build_id = F@_2}.

'd_field_google.devtools.cloudtrace.v2.Module_module'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Module_module'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'd_field_google.devtools.cloudtrace.v2.Module_module'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, Prev, F@_2,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(RestF,
							      0, 0,
							      if Prev ==
								   undefined ->
								     NewFValue;
								 true ->
								     'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																 NewFValue,
																 TrUserData)
							      end,
							      F@_2, TrUserData).

'd_field_google.devtools.cloudtrace.v2.Module_build_id'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.Module_build_id'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'd_field_google.devtools.cloudtrace.v2.Module_build_id'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, Prev,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(RestF,
							      0, 0, F@_1,
							      if Prev ==
								   undefined ->
								     NewFValue;
								 true ->
								     'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
																 NewFValue,
																 TrUserData)
							      end,
							      TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.Module'(<<1:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.Module'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.Module'(<<0:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.Module'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.Module'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.Module'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Rest2,
							      0, 0, F@_1, F@_2,
							      TrUserData).

'skip_group_google.devtools.cloudtrace.v2.Module'(Bin,
						  FNum, Z2, F@_1, F@_2,
						  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Rest,
							      0, Z2, F@_1, F@_2,
							      TrUserData).

'skip_32_google.devtools.cloudtrace.v2.Module'(<<_:32,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData).

'skip_64_google.devtools.cloudtrace.v2.Module'(<<_:64,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.Module'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData).

'decode_msg_google.devtools.cloudtrace.v2.TruncatableString'(Bin,
							     TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Bin,
									 0, 0,
									 id([],
									    TrUserData),
									 id(0,
									    TrUserData),
									 TrUserData).

'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(<<10,
								       Rest/binary>>,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.TruncatableString_value'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(<<16,
								       Rest/binary>>,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    'd_field_google.devtools.cloudtrace.v2.TruncatableString_truncated_byte_count'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   TrUserData);
'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(<<>>,
								     0, 0, F@_1,
								     F@_2, _) ->
    #'google.devtools.cloudtrace.v2.TruncatableString'{value
							   = F@_1,
						       truncated_byte_count =
							   F@_2};
'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Other,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Other,
									Z1, Z2,
									F@_1,
									F@_2,
									TrUserData).

'dg_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									TrUserData);
'dg_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_google.devtools.cloudtrace.v2.TruncatableString_value'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
      16 ->
	  'd_field_google.devtools.cloudtrace.v2.TruncatableString_truncated_byte_count'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
	    1 ->
		'skip_64_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    2 ->
		'skip_length_delimited_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
											0,
											0,
											F@_1,
											F@_2,
											TrUserData);
	    3 ->
		'skip_group_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									     Key
									       bsr
									       3,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
	    5 ->
		'skip_32_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData)
	  end
    end;
'dg_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(<<>>,
								    0, 0, F@_1,
								    F@_2, _) ->
    #'google.devtools.cloudtrace.v2.TruncatableString'{value
							   = F@_1,
						       truncated_byte_count =
							   F@_2}.

'd_field_google.devtools.cloudtrace.v2.TruncatableString_value'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.TruncatableString_value'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'd_field_google.devtools.cloudtrace.v2.TruncatableString_value'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, _, F@_2,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(RestF,
									 0, 0,
									 NewFValue,
									 F@_2,
									 TrUserData).

'd_field_google.devtools.cloudtrace.v2.TruncatableString_truncated_byte_count'(<<1:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       F@_2,
									       TrUserData)
    when N < 57 ->
    'd_field_google.devtools.cloudtrace.v2.TruncatableString_truncated_byte_count'(Rest,
										   N
										     +
										     7,
										   X
										     bsl
										     N
										     +
										     Acc,
										   F@_1,
										   F@_2,
										   TrUserData);
'd_field_google.devtools.cloudtrace.v2.TruncatableString_truncated_byte_count'(<<0:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       _,
									       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(RestF,
									 0, 0,
									 F@_1,
									 NewFValue,
									 TrUserData).

'skip_varint_google.devtools.cloudtrace.v2.TruncatableString'(<<1:1,
								_:7,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'skip_varint_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'skip_varint_google.devtools.cloudtrace.v2.TruncatableString'(<<0:1,
								_:7,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_length_delimited_google.devtools.cloudtrace.v2.TruncatableString'(<<1:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									    N +
									      7,
									    X
									      bsl
									      N
									      +
									      Acc,
									    F@_1,
									    F@_2,
									    TrUserData);
'skip_length_delimited_google.devtools.cloudtrace.v2.TruncatableString'(<<0:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Rest2,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_group_google.devtools.cloudtrace.v2.TruncatableString'(Bin,
							     FNum, Z2, F@_1,
							     F@_2,
							     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									 0, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_32_google.devtools.cloudtrace.v2.TruncatableString'(<<_:32,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_64_google.devtools.cloudtrace.v2.TruncatableString'(<<_:64,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'dfp_read_field_def_google.devtools.cloudtrace.v2.TruncatableString'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'decode_msg_google.protobuf.Timestamp'(Bin,
				       TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Bin, 0,
						   0, id(0, TrUserData),
						   id(0, TrUserData),
						   TrUserData).

'dfp_read_field_def_google.protobuf.Timestamp'(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'd_field_google.protobuf.Timestamp_seconds'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(<<16,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'd_field_google.protobuf.Timestamp_nanos'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'dfp_read_field_def_google.protobuf.Timestamp'(<<>>, 0,
					       0, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1,
				 nanos = F@_2};
'dfp_read_field_def_google.protobuf.Timestamp'(Other,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'dg_read_field_def_google.protobuf.Timestamp'(Other, Z1,
						  Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_google.protobuf.Timestamp'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_google.protobuf.Timestamp'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
'dg_read_field_def_google.protobuf.Timestamp'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_google.protobuf.Timestamp_seconds'(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      16 ->
	  'd_field_google.protobuf.Timestamp_nanos'(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_google.protobuf.Timestamp'(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    1 ->
		'skip_64_google.protobuf.Timestamp'(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_google.protobuf.Timestamp'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    3 ->
		'skip_group_google.protobuf.Timestamp'(Rest, Key bsr 3,
						       0, F@_1, F@_2,
						       TrUserData);
	    5 ->
		'skip_32_google.protobuf.Timestamp'(Rest, 0, 0, F@_1,
						    F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_google.protobuf.Timestamp'(<<>>, 0,
					      0, F@_1, F@_2, _) ->
    #'google.protobuf.Timestamp'{seconds = F@_1,
				 nanos = F@_2}.

'd_field_google.protobuf.Timestamp_seconds'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_google.protobuf.Timestamp_seconds'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'd_field_google.protobuf.Timestamp_seconds'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0,
						   0, NewFValue, F@_2,
						   TrUserData).

'd_field_google.protobuf.Timestamp_nanos'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_google.protobuf.Timestamp_nanos'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'd_field_google.protobuf.Timestamp_nanos'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_google.protobuf.Timestamp'(RestF, 0,
						   0, F@_1, NewFValue,
						   TrUserData).

'skip_varint_google.protobuf.Timestamp'(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_google.protobuf.Timestamp'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
'skip_varint_google.protobuf.Timestamp'(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_google.protobuf.Timestamp'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    'skip_length_delimited_google.protobuf.Timestamp'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'skip_length_delimited_google.protobuf.Timestamp'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest2, 0,
						   0, F@_1, F@_2, TrUserData).

'skip_group_google.protobuf.Timestamp'(Bin, FNum, Z2,
				       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, 0,
						   Z2, F@_1, F@_2, TrUserData).

'skip_32_google.protobuf.Timestamp'(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

'skip_64_google.protobuf.Timestamp'(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_google.protobuf.Timestamp'(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

'decode_msg_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Bin,
								      TrUserData) ->
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Bin,
										  0,
										  0,
										  id([],
										     TrUserData),
										  id(undefined,
										     TrUserData),
										  TrUserData).

'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<10,
										Rest/binary>>,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_key'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   TrUserData);
'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<18,
										Rest/binary>>,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(Rest,
									     Z1,
									     Z2,
									     F@_1,
									     F@_2,
									     TrUserData);
'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<>>,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      _) ->
    #'map<string,google.devtools.cloudtrace.v2.AttributeValue>'{key
								    = F@_1,
								value = F@_2};
'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Other,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData) ->
    'dg_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Other,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 TrUserData).

'dg_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<1:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										 N
										   +
										   7,
										 X
										   bsl
										   N
										   +
										   Acc,
										 F@_1,
										 F@_2,
										 TrUserData);
'dg_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<0:1,
									       X:7,
									       Rest/binary>>,
									     N,
									     Acc,
									     F@_1,
									     F@_2,
									     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_key'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData);
      18 ->
	  'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										       0,
										       0,
										       F@_1,
										       F@_2,
										       TrUserData);
	    1 ->
		'skip_64_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   TrUserData);
	    2 ->
		'skip_length_delimited_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
												 0,
												 0,
												 F@_1,
												 F@_2,
												 TrUserData);
	    3 ->
		'skip_group_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										      Key
											bsr
											3,
										      0,
										      F@_1,
										      F@_2,
										      TrUserData);
	    5 ->
		'skip_32_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   TrUserData)
	  end
    end;
'dg_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<>>,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     _) ->
    #'map<string,google.devtools.cloudtrace.v2.AttributeValue>'{key
								    = F@_1,
								value = F@_2}.

'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_key'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       TrUserData)
    when N < 57 ->
    'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_key'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   F@_2,
									   TrUserData);
'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_key'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       _, F@_2,
								       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(RestF,
										  0,
										  0,
										  NewFValue,
										  F@_2,
										  TrUserData).

'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(<<1:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 TrUserData)
    when N < 57 ->
    'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(Rest,
									     N +
									       7,
									     X
									       bsl
									       N
									       +
									       Acc,
									     F@_1,
									     F@_2,
									     TrUserData);
'd_field_map<string,google.devtools.cloudtrace.v2.AttributeValue>_value'(<<0:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 Prev,
									 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_google.devtools.cloudtrace.v2.AttributeValue'(Bs,
											 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(RestF,
										  0,
										  0,
										  F@_1,
										  if
										    Prev
										      ==
										      undefined ->
											NewFValue;
										    true ->
											'merge_msg_google.devtools.cloudtrace.v2.AttributeValue'(Prev,
																		 NewFValue,
																		 TrUserData)
										  end,
										  TrUserData).

'skip_varint_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<1:1,
									 _:7,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData) ->
    'skip_varint_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   TrUserData);
'skip_varint_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<0:1,
									 _:7,
									 Rest/binary>>,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData) ->
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData).

'skip_length_delimited_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     TrUserData);
'skip_length_delimited_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest2,
										  0,
										  0,
										  F@_1,
										  F@_2,
										  TrUserData).

'skip_group_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Bin,
								      FNum, Z2,
								      F@_1,
								      F@_2,
								      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										  0,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData).

'skip_32_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<_:32,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData).

'skip_64_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(<<_:64,
								     Rest/binary>>,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData) ->
    'dfp_read_field_def_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(Rest,
										  Z1,
										  Z2,
										  F@_1,
										  F@_2,
										  TrUserData).

'd_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(0) ->
    'TYPE_UNSPECIFIED';
'd_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(1) ->
    'SENT';
'd_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(2) ->
    'RECEIVED';
'd_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(V) ->
    V.

'd_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(0) ->
    'TYPE_UNSPECIFIED';
'd_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(1) ->
    'CHILD_LINKED_SPAN';
'd_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(2) ->
    'PARENT_LINKED_SPAN';
'd_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(V) ->
    V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'google.devtools.cloudtrace.v2.Span.Attributes' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Prev,
								    New,
								    TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Prev,
								   New,
								   TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Prev,
										New,
										TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Prev,
									      New,
									      TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvents' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Prev,
								    New,
								    TrUserData);
      'google.devtools.cloudtrace.v2.Span.Link' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.Link'(Prev,
							      New, TrUserData);
      'google.devtools.cloudtrace.v2.Span.Links' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span.Links'(Prev,
							       New, TrUserData);
      'google.devtools.cloudtrace.v2.Span' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Span'(Prev,
							 New, TrUserData);
      'google.devtools.cloudtrace.v2.AttributeValue' ->
	  'merge_msg_google.devtools.cloudtrace.v2.AttributeValue'(Prev,
								   New,
								   TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace.StackFrame' ->
	  'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Prev,
									  New,
									  TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace.StackFrames' ->
	  'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Prev,
									   New,
									   TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace' ->
	  'merge_msg_google.devtools.cloudtrace.v2.StackTrace'(Prev,
							       New, TrUserData);
      'google.devtools.cloudtrace.v2.Module' ->
	  'merge_msg_google.devtools.cloudtrace.v2.Module'(Prev,
							   New, TrUserData);
      'google.devtools.cloudtrace.v2.TruncatableString' ->
	  'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(Prev,
								      New,
								      TrUserData);
      'google.protobuf.Timestamp' ->
	  'merge_msg_google.protobuf.Timestamp'(Prev, New,
						TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(#'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
													       =
													       PFattribute_map,
													   dropped_attributes_count
													       =
													       PFdropped_attributes_count},
							  #'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
													       =
													       NFattribute_map,
													   dropped_attributes_count
													       =
													       NFdropped_attributes_count},
							  TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
							 =
							 if PFattribute_map /=
							      undefined,
							    NFattribute_map /=
							      undefined ->
								'tr_merge_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(PFattribute_map,
																       NFattribute_map,
																       TrUserData);
							    PFattribute_map ==
							      undefined ->
								NFattribute_map;
							    NFattribute_map ==
							      undefined ->
								PFattribute_map
							 end,
						     dropped_attributes_count =
							 if
							   NFdropped_attributes_count
							     =:= undefined ->
							       PFdropped_attributes_count;
							   true ->
							       NFdropped_attributes_count
							 end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(#'google.devtools.cloudtrace.v2.Span.TimeEvent'{time
													     =
													     PFtime,
													 value
													     =
													     PFvalue},
							 #'google.devtools.cloudtrace.v2.Span.TimeEvent'{time
													     =
													     NFtime,
													 value
													     =
													     NFvalue},
							 TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent'{time =
							if PFtime /= undefined,
							   NFtime /=
							     undefined ->
							       'merge_msg_google.protobuf.Timestamp'(PFtime,
												     NFtime,
												     TrUserData);
							   PFtime ==
							     undefined ->
							       NFtime;
							   NFtime ==
							     undefined ->
							       PFtime
							end,
						    value =
							case {PFvalue, NFvalue}
							    of
							  {{annotation,
							    OPFvalue},
							   {annotation,
							    ONFvalue}} ->
							      {annotation,
							       'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(OPFvalue,
																   ONFvalue,
																   TrUserData)};
							  {{message_event,
							    OPFvalue},
							   {message_event,
							    ONFvalue}} ->
							      {message_event,
							       'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(OPFvalue,
																     ONFvalue,
																     TrUserData)};
							  {_, undefined} ->
							      PFvalue;
							  _ -> NFvalue
							end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(#'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
																       =
																       PFtype,
																   id
																       =
																       PFid,
																   uncompressed_size_bytes
																       =
																       PFuncompressed_size_bytes,
																   compressed_size_bytes
																       =
																       PFcompressed_size_bytes},
								      #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
																       =
																       NFtype,
																   id
																       =
																       NFid,
																   uncompressed_size_bytes
																       =
																       NFuncompressed_size_bytes,
																   compressed_size_bytes
																       =
																       NFcompressed_size_bytes},
								      _) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
								     =
								     if NFtype
									  =:=
									  undefined ->
									    PFtype;
									true ->
									    NFtype
								     end,
								 id =
								     if NFid =:=
									  undefined ->
									    PFid;
									true ->
									    NFid
								     end,
								 uncompressed_size_bytes
								     =
								     if
								       NFuncompressed_size_bytes
									 =:=
									 undefined ->
									   PFuncompressed_size_bytes;
								       true ->
									   NFuncompressed_size_bytes
								     end,
								 compressed_size_bytes
								     =
								     if
								       NFcompressed_size_bytes
									 =:=
									 undefined ->
									   PFcompressed_size_bytes;
								       true ->
									   NFcompressed_size_bytes
								     end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(#'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
																   =
																   PFdescription,
															       attributes
																   =
																   PFattributes},
								    #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
																   =
																   NFdescription,
															       attributes
																   =
																   NFattributes},
								    TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
								   =
								   if
								     PFdescription
								       /=
								       undefined,
								     NFdescription
								       /=
								       undefined ->
									 'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFdescription,
																     NFdescription,
																     TrUserData);
								     PFdescription
								       ==
								       undefined ->
									 NFdescription;
								     NFdescription
								       ==
								       undefined ->
									 PFdescription
								   end,
							       attributes =
								   if
								     PFattributes
								       /=
								       undefined,
								     NFattributes
								       /=
								       undefined ->
									 'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(PFattributes,
																   NFattributes,
																   TrUserData);
								     PFattributes
								       ==
								       undefined ->
									 NFattributes;
								     NFattributes
								       ==
								       undefined ->
									 PFattributes
								   end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(#'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
													       =
													       PFtime_event,
													   dropped_annotations_count
													       =
													       PFdropped_annotations_count,
													   dropped_message_events_count
													       =
													       PFdropped_message_events_count},
							  #'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
													       =
													       NFtime_event,
													   dropped_annotations_count
													       =
													       NFdropped_annotations_count,
													   dropped_message_events_count
													       =
													       NFdropped_message_events_count},
							  TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
							 =
							 if PFtime_event /=
							      undefined,
							    NFtime_event /=
							      undefined ->
								'erlang_++'(PFtime_event,
									    NFtime_event,
									    TrUserData);
							    PFtime_event ==
							      undefined ->
								NFtime_event;
							    NFtime_event ==
							      undefined ->
								PFtime_event
							 end,
						     dropped_annotations_count =
							 if
							   NFdropped_annotations_count
							     =:= undefined ->
							       PFdropped_annotations_count;
							   true ->
							       NFdropped_annotations_count
							 end,
						     dropped_message_events_count
							 =
							 if
							   NFdropped_message_events_count
							     =:= undefined ->
							       PFdropped_message_events_count;
							   true ->
							       NFdropped_message_events_count
							 end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.Link'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.Link'(#'google.devtools.cloudtrace.v2.Span.Link'{trace_id
												   =
												   PFtrace_id,
											       span_id
												   =
												   PFspan_id,
											       type
												   =
												   PFtype,
											       attributes
												   =
												   PFattributes},
						    #'google.devtools.cloudtrace.v2.Span.Link'{trace_id
												   =
												   NFtrace_id,
											       span_id
												   =
												   NFspan_id,
											       type
												   =
												   NFtype,
											       attributes
												   =
												   NFattributes},
						    TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Link'{trace_id =
						   if NFtrace_id =:=
							undefined ->
							  PFtrace_id;
						      true -> NFtrace_id
						   end,
					       span_id =
						   if NFspan_id =:= undefined ->
							  PFspan_id;
						      true -> NFspan_id
						   end,
					       type =
						   if NFtype =:= undefined ->
							  PFtype;
						      true -> NFtype
						   end,
					       attributes =
						   if PFattributes /= undefined,
						      NFattributes /=
							undefined ->
							  'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(PFattributes,
														    NFattributes,
														    TrUserData);
						      PFattributes ==
							undefined ->
							  NFattributes;
						      NFattributes ==
							undefined ->
							  PFattributes
						   end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span.Links'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span.Links'(#'google.devtools.cloudtrace.v2.Span.Links'{link
												     =
												     PFlink,
												 dropped_links_count
												     =
												     PFdropped_links_count},
						     #'google.devtools.cloudtrace.v2.Span.Links'{link
												     =
												     NFlink,
												 dropped_links_count
												     =
												     NFdropped_links_count},
						     TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span.Links'{link =
						    if PFlink /= undefined,
						       NFlink /= undefined ->
							   'erlang_++'(PFlink,
								       NFlink,
								       TrUserData);
						       PFlink == undefined ->
							   NFlink;
						       NFlink == undefined ->
							   PFlink
						    end,
						dropped_links_count =
						    if NFdropped_links_count =:=
							 undefined ->
							   PFdropped_links_count;
						       true ->
							   NFdropped_links_count
						    end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Span'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Span'(#'google.devtools.cloudtrace.v2.Span'{name
											 =
											 PFname,
										     span_id
											 =
											 PFspan_id,
										     parent_span_id
											 =
											 PFparent_span_id,
										     display_name
											 =
											 PFdisplay_name,
										     start_time
											 =
											 PFstart_time,
										     end_time
											 =
											 PFend_time,
										     attributes
											 =
											 PFattributes,
										     stack_trace
											 =
											 PFstack_trace,
										     time_events
											 =
											 PFtime_events,
										     links
											 =
											 PFlinks},
					       #'google.devtools.cloudtrace.v2.Span'{name
											 =
											 NFname,
										     span_id
											 =
											 NFspan_id,
										     parent_span_id
											 =
											 NFparent_span_id,
										     display_name
											 =
											 NFdisplay_name,
										     start_time
											 =
											 NFstart_time,
										     end_time
											 =
											 NFend_time,
										     attributes
											 =
											 NFattributes,
										     stack_trace
											 =
											 NFstack_trace,
										     time_events
											 =
											 NFtime_events,
										     links
											 =
											 NFlinks},
					       TrUserData) ->
    #'google.devtools.cloudtrace.v2.Span'{name =
					      if NFname =:= undefined -> PFname;
						 true -> NFname
					      end,
					  span_id =
					      if NFspan_id =:= undefined ->
						     PFspan_id;
						 true -> NFspan_id
					      end,
					  parent_span_id =
					      if NFparent_span_id =:=
						   undefined ->
						     PFparent_span_id;
						 true -> NFparent_span_id
					      end,
					  display_name =
					      if PFdisplay_name /= undefined,
						 NFdisplay_name /= undefined ->
						     'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFdisplay_name,
														 NFdisplay_name,
														 TrUserData);
						 PFdisplay_name == undefined ->
						     NFdisplay_name;
						 NFdisplay_name == undefined ->
						     PFdisplay_name
					      end,
					  start_time =
					      if PFstart_time /= undefined,
						 NFstart_time /= undefined ->
						     'merge_msg_google.protobuf.Timestamp'(PFstart_time,
											   NFstart_time,
											   TrUserData);
						 PFstart_time == undefined ->
						     NFstart_time;
						 NFstart_time == undefined ->
						     PFstart_time
					      end,
					  end_time =
					      if PFend_time /= undefined,
						 NFend_time /= undefined ->
						     'merge_msg_google.protobuf.Timestamp'(PFend_time,
											   NFend_time,
											   TrUserData);
						 PFend_time == undefined ->
						     NFend_time;
						 NFend_time == undefined ->
						     PFend_time
					      end,
					  attributes =
					      if PFattributes /= undefined,
						 NFattributes /= undefined ->
						     'merge_msg_google.devtools.cloudtrace.v2.Span.Attributes'(PFattributes,
													       NFattributes,
													       TrUserData);
						 PFattributes == undefined ->
						     NFattributes;
						 NFattributes == undefined ->
						     PFattributes
					      end,
					  stack_trace =
					      if PFstack_trace /= undefined,
						 NFstack_trace /= undefined ->
						     'merge_msg_google.devtools.cloudtrace.v2.StackTrace'(PFstack_trace,
													  NFstack_trace,
													  TrUserData);
						 PFstack_trace == undefined ->
						     NFstack_trace;
						 NFstack_trace == undefined ->
						     PFstack_trace
					      end,
					  time_events =
					      if PFtime_events /= undefined,
						 NFtime_events /= undefined ->
						     'merge_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(PFtime_events,
													       NFtime_events,
													       TrUserData);
						 PFtime_events == undefined ->
						     NFtime_events;
						 NFtime_events == undefined ->
						     PFtime_events
					      end,
					  links =
					      if PFlinks /= undefined,
						 NFlinks /= undefined ->
						     'merge_msg_google.devtools.cloudtrace.v2.Span.Links'(PFlinks,
													  NFlinks,
													  TrUserData);
						 PFlinks == undefined ->
						     NFlinks;
						 NFlinks == undefined -> PFlinks
					      end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.AttributeValue'/3}).
'merge_msg_google.devtools.cloudtrace.v2.AttributeValue'(#'google.devtools.cloudtrace.v2.AttributeValue'{value
													     =
													     PFvalue},
							 #'google.devtools.cloudtrace.v2.AttributeValue'{value
													     =
													     NFvalue},
							 TrUserData) ->
    #'google.devtools.cloudtrace.v2.AttributeValue'{value =
							case {PFvalue, NFvalue}
							    of
							  {{string_value,
							    OPFvalue},
							   {string_value,
							    ONFvalue}} ->
							      {string_value,
							       'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(OPFvalue,
															   ONFvalue,
															   TrUserData)};
							  {_, undefined} ->
							      PFvalue;
							  _ -> NFvalue
							end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'/3}).
'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(#'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
															   =
															   PFfunction_name,
														       original_function_name
															   =
															   PForiginal_function_name,
														       file_name
															   =
															   PFfile_name,
														       line_number
															   =
															   PFline_number,
														       column_number
															   =
															   PFcolumn_number,
														       load_module
															   =
															   PFload_module,
														       source_version
															   =
															   PFsource_version},
								#'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
															   =
															   NFfunction_name,
														       original_function_name
															   =
															   NForiginal_function_name,
														       file_name
															   =
															   NFfile_name,
														       line_number
															   =
															   NFline_number,
														       column_number
															   =
															   NFcolumn_number,
														       load_module
															   =
															   NFload_module,
														       source_version
															   =
															   NFsource_version},
								TrUserData) ->
    #'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
							       =
							       if
								 PFfunction_name
								   /= undefined,
								 NFfunction_name
								   /=
								   undefined ->
								     'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFfunction_name,
																 NFfunction_name,
																 TrUserData);
								 PFfunction_name
								   ==
								   undefined ->
								     NFfunction_name;
								 NFfunction_name
								   ==
								   undefined ->
								     PFfunction_name
							       end,
							   original_function_name
							       =
							       if
								 PForiginal_function_name
								   /= undefined,
								 NForiginal_function_name
								   /=
								   undefined ->
								     'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PForiginal_function_name,
																 NForiginal_function_name,
																 TrUserData);
								 PForiginal_function_name
								   ==
								   undefined ->
								     NForiginal_function_name;
								 NForiginal_function_name
								   ==
								   undefined ->
								     PForiginal_function_name
							       end,
							   file_name =
							       if PFfile_name /=
								    undefined,
								  NFfile_name /=
								    undefined ->
								      'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFfile_name,
																  NFfile_name,
																  TrUserData);
								  PFfile_name ==
								    undefined ->
								      NFfile_name;
								  NFfile_name ==
								    undefined ->
								      PFfile_name
							       end,
							   line_number =
							       if NFline_number
								    =:=
								    undefined ->
								      PFline_number;
								  true ->
								      NFline_number
							       end,
							   column_number =
							       if
								 NFcolumn_number
								   =:=
								   undefined ->
								     PFcolumn_number;
								 true ->
								     NFcolumn_number
							       end,
							   load_module =
							       if PFload_module
								    /=
								    undefined,
								  NFload_module
								    /=
								    undefined ->
								      'merge_msg_google.devtools.cloudtrace.v2.Module'(PFload_module,
														       NFload_module,
														       TrUserData);
								  PFload_module
								    ==
								    undefined ->
								      NFload_module;
								  NFload_module
								    ==
								    undefined ->
								      PFload_module
							       end,
							   source_version =
							       if
								 PFsource_version
								   /= undefined,
								 NFsource_version
								   /=
								   undefined ->
								     'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFsource_version,
																 NFsource_version,
																 TrUserData);
								 PFsource_version
								   ==
								   undefined ->
								     NFsource_version;
								 NFsource_version
								   ==
								   undefined ->
								     PFsource_version
							       end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'/3}).
'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(#'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
															     =
															     PFframe,
															 dropped_frames_count
															     =
															     PFdropped_frames_count},
								 #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
															     =
															     NFframe,
															 dropped_frames_count
															     =
															     NFdropped_frames_count},
								 TrUserData) ->
    #'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
								=
								if PFframe /=
								     undefined,
								   NFframe /=
								     undefined ->
								       'erlang_++'(PFframe,
										   NFframe,
										   TrUserData);
								   PFframe ==
								     undefined ->
								       NFframe;
								   NFframe ==
								     undefined ->
								       PFframe
								end,
							    dropped_frames_count
								=
								if
								  NFdropped_frames_count
								    =:=
								    undefined ->
								      PFdropped_frames_count;
								  true ->
								      NFdropped_frames_count
								end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.StackTrace'/3}).
'merge_msg_google.devtools.cloudtrace.v2.StackTrace'(#'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
												     =
												     PFstack_frames,
												 stack_trace_hash_id
												     =
												     PFstack_trace_hash_id},
						     #'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
												     =
												     NFstack_frames,
												 stack_trace_hash_id
												     =
												     NFstack_trace_hash_id},
						     TrUserData) ->
    #'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
						    =
						    if PFstack_frames /=
							 undefined,
						       NFstack_frames /=
							 undefined ->
							   'merge_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(PFstack_frames,
															    NFstack_frames,
															    TrUserData);
						       PFstack_frames ==
							 undefined ->
							   NFstack_frames;
						       NFstack_frames ==
							 undefined ->
							   PFstack_frames
						    end,
						stack_trace_hash_id =
						    if NFstack_trace_hash_id =:=
							 undefined ->
							   PFstack_trace_hash_id;
						       true ->
							   NFstack_trace_hash_id
						    end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.Module'/3}).
'merge_msg_google.devtools.cloudtrace.v2.Module'(#'google.devtools.cloudtrace.v2.Module'{module
											     =
											     PFmodule,
											 build_id
											     =
											     PFbuild_id},
						 #'google.devtools.cloudtrace.v2.Module'{module
											     =
											     NFmodule,
											 build_id
											     =
											     NFbuild_id},
						 TrUserData) ->
    #'google.devtools.cloudtrace.v2.Module'{module =
						if PFmodule /= undefined,
						   NFmodule /= undefined ->
						       'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFmodule,
														   NFmodule,
														   TrUserData);
						   PFmodule == undefined ->
						       NFmodule;
						   NFmodule == undefined ->
						       PFmodule
						end,
					    build_id =
						if PFbuild_id /= undefined,
						   NFbuild_id /= undefined ->
						       'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(PFbuild_id,
														   NFbuild_id,
														   TrUserData);
						   PFbuild_id == undefined ->
						       NFbuild_id;
						   NFbuild_id == undefined ->
						       PFbuild_id
						end}.

-compile({nowarn_unused_function,'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'/3}).
'merge_msg_google.devtools.cloudtrace.v2.TruncatableString'(#'google.devtools.cloudtrace.v2.TruncatableString'{value
														   =
														   PFvalue,
													       truncated_byte_count
														   =
														   PFtruncated_byte_count},
							    #'google.devtools.cloudtrace.v2.TruncatableString'{value
														   =
														   NFvalue,
													       truncated_byte_count
														   =
														   NFtruncated_byte_count},
							    _) ->
    #'google.devtools.cloudtrace.v2.TruncatableString'{value
							   =
							   if NFvalue =:=
								undefined ->
								  PFvalue;
							      true -> NFvalue
							   end,
						       truncated_byte_count =
							   if
							     NFtruncated_byte_count
							       =:= undefined ->
								 PFtruncated_byte_count;
							     true ->
								 NFtruncated_byte_count
							   end}.

-compile({nowarn_unused_function,'merge_msg_google.protobuf.Timestamp'/3}).
'merge_msg_google.protobuf.Timestamp'(#'google.protobuf.Timestamp'{seconds
								       =
								       PFseconds,
								   nanos =
								       PFnanos},
				      #'google.protobuf.Timestamp'{seconds =
								       NFseconds,
								   nanos =
								       NFnanos},
				      _) ->
    #'google.protobuf.Timestamp'{seconds =
				     if NFseconds =:= undefined -> PFseconds;
					true -> NFseconds
				     end,
				 nanos =
				     if NFnanos =:= undefined -> PFnanos;
					true -> NFnanos
				     end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'google.devtools.cloudtrace.v2.Span.Attributes' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'(Msg,
								[MsgName],
								TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Msg,
							       [MsgName],
							       TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(Msg,
									    [MsgName],
									    TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(Msg,
									  [MsgName],
									  TrUserData);
      'google.devtools.cloudtrace.v2.Span.TimeEvents' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(Msg,
								[MsgName],
								TrUserData);
      'google.devtools.cloudtrace.v2.Span.Link' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.Link'(Msg,
							  [MsgName],
							  TrUserData);
      'google.devtools.cloudtrace.v2.Span.Links' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.Links'(Msg,
							   [MsgName],
							   TrUserData);
      'google.devtools.cloudtrace.v2.Span' ->
	  'v_msg_google.devtools.cloudtrace.v2.Span'(Msg,
						     [MsgName], TrUserData);
      'google.devtools.cloudtrace.v2.AttributeValue' ->
	  'v_msg_google.devtools.cloudtrace.v2.AttributeValue'(Msg,
							       [MsgName],
							       TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace.StackFrame' ->
	  'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Msg,
								      [MsgName],
								      TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace.StackFrames' ->
	  'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(Msg,
								       [MsgName],
								       TrUserData);
      'google.devtools.cloudtrace.v2.StackTrace' ->
	  'v_msg_google.devtools.cloudtrace.v2.StackTrace'(Msg,
							   [MsgName],
							   TrUserData);
      'google.devtools.cloudtrace.v2.Module' ->
	  'v_msg_google.devtools.cloudtrace.v2.Module'(Msg,
						       [MsgName], TrUserData);
      'google.devtools.cloudtrace.v2.TruncatableString' ->
	  'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(Msg,
								  [MsgName],
								  TrUserData);
      'google.protobuf.Timestamp' ->
	  'v_msg_google.protobuf.Timestamp'(Msg, [MsgName],
					    TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'(#'google.devtools.cloudtrace.v2.Span.Attributes'{attribute_map
													   =
													   F1,
												       dropped_attributes_count
													   =
													   F2},
						      Path, TrUserData) ->
    'v_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(F1,
								 [attribute_map
								  | Path],
								 TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_attributes_count | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'(X,
						      Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.Attributes'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(#'google.devtools.cloudtrace.v2.Span.TimeEvent'{time
													 =
													 F1,
												     value
													 =
													 F2},
						     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_google.protobuf.Timestamp'(F1, [time | Path],
					     TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {annotation, OF2} ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(OF2,
									  [annotation,
									   value
									   | Path],
									  TrUserData);
      {message_event, OF2} ->
	  'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(OF2,
									    [message_event,
									     value
									     | Path],
									    TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, [value | Path])
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(X,
						     Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.TimeEvent'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(#'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'{type
																   =
																   F1,
															       id
																   =
																   F2,
															       uncompressed_size_bytes
																   =
																   F3,
															       compressed_size_bytes
																   =
																   F4},
								  Path,
								  TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(F1,
										   [type
										    | Path],
										   TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [uncompressed_size_bytes | Path],
			TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [compressed_size_bytes | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'(X,
								  Path,
								  _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(#'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'{description
															       =
															       F1,
															   attributes
															       =
															       F2},
								Path,
								TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F1,
								   [description
								    | Path],
								   TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'(F2,
								 [attributes
								  | Path],
								 TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'(X,
								Path,
								_TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(#'google.devtools.cloudtrace.v2.Span.TimeEvents'{time_event
													   =
													   F1,
												       dropped_annotations_count
													   =
													   F2,
												       dropped_message_events_count
													   =
													   F3},
						      Path, TrUserData) ->
    if is_list(F1) ->
	   _ =
	       ['v_msg_google.devtools.cloudtrace.v2.Span.TimeEvent'(Elem,
								     [time_event
								      | Path],
								     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg,
			   'google.devtools.cloudtrace.v2.Span.TimeEvent'}},
			 F1, [time_event | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_annotations_count | Path],
			TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int32(F3, [dropped_message_events_count | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(X,
						      Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.TimeEvents'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.Link'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.Link'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.Link'(#'google.devtools.cloudtrace.v2.Span.Link'{trace_id
											       =
											       F1,
											   span_id
											       =
											       F2,
											   type
											       =
											       F3,
											   attributes
											       =
											       F4},
						Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [trace_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [span_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(F3,
								 [type | Path],
								 TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'(F4,
								 [attributes
								  | Path],
								 TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.Link'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.Link'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span.Links'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span.Links'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span.Links'(#'google.devtools.cloudtrace.v2.Span.Links'{link
												 =
												 F1,
											     dropped_links_count
												 =
												 F2},
						 Path, TrUserData) ->
    if is_list(F1) ->
	   _ =
	       ['v_msg_google.devtools.cloudtrace.v2.Span.Link'(Elem,
								[link | Path],
								TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'google.devtools.cloudtrace.v2.Span.Link'}},
			 F1, [link | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_links_count | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span.Links'(X,
						 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span.Links'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Span'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Span'/3}).
'v_msg_google.devtools.cloudtrace.v2.Span'(#'google.devtools.cloudtrace.v2.Span'{name
										     =
										     F1,
										 span_id
										     =
										     F2,
										 parent_span_id
										     =
										     F3,
										 display_name
										     =
										     F4,
										 start_time
										     =
										     F5,
										 end_time
										     =
										     F6,
										 attributes
										     =
										     F7,
										 stack_trace
										     =
										     F8,
										 time_events
										     =
										     F9,
										 links
										     =
										     F10},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [span_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [parent_span_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F4,
								   [display_name
								    | Path],
								   TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_google.protobuf.Timestamp'(F5,
					     [start_time | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_google.protobuf.Timestamp'(F6, [end_time | Path],
					     TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.Span.Attributes'(F7,
								 [attributes
								  | Path],
								 TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.StackTrace'(F8,
							    [stack_trace
							     | Path],
							    TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.Span.TimeEvents'(F9,
								 [time_events
								  | Path],
								 TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.Span.Links'(F10,
							    [links | Path],
							    TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Span'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Span'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.AttributeValue'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.AttributeValue'/3}).
'v_msg_google.devtools.cloudtrace.v2.AttributeValue'(#'google.devtools.cloudtrace.v2.AttributeValue'{value
													 =
													 F1},
						     Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {string_value, OF1} ->
	  'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(OF1,
								  [string_value,
								   value
								   | Path],
								  TrUserData);
      {int_value, OF1} ->
	  v_type_int64(OF1, [int_value, value | Path],
		       TrUserData);
      {bool_value, OF1} ->
	  v_type_bool(OF1, [bool_value, value | Path],
		      TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [value | Path])
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.AttributeValue'(X,
						     Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.AttributeValue'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'/3}).
'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(#'google.devtools.cloudtrace.v2.StackTrace.StackFrame'{function_name
														       =
														       F1,
														   original_function_name
														       =
														       F2,
														   file_name
														       =
														       F3,
														   line_number
														       =
														       F4,
														   column_number
														       =
														       F5,
														   load_module
														       =
														       F6,
														   source_version
														       =
														       F7},
							    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F1,
								   [function_name
								    | Path],
								   TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F2,
								   [original_function_name
								    | Path],
								   TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F3,
								   [file_name
								    | Path],
								   TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [line_number | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_int64(F5, [column_number | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.Module'(F6,
							[load_module | Path],
							TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F7,
								   [source_version
								    | Path],
								   TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(X,
							    Path,
							    _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.StackTrace.StackFrame'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'/3}).
'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(#'google.devtools.cloudtrace.v2.StackTrace.StackFrames'{frame
															 =
															 F1,
														     dropped_frames_count
															 =
															 F2},
							     Path,
							     TrUserData) ->
    if is_list(F1) ->
	   _ =
	       ['v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrame'(Elem,
									    [frame
									     | Path],
									    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg,
			   'google.devtools.cloudtrace.v2.StackTrace.StackFrame'}},
			 F1, [frame | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_frames_count | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(X,
							     Path,
							     _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.StackTrace.StackFrames'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.StackTrace'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.StackTrace'/3}).
'v_msg_google.devtools.cloudtrace.v2.StackTrace'(#'google.devtools.cloudtrace.v2.StackTrace'{stack_frames
												 =
												 F1,
											     stack_trace_hash_id
												 =
												 F2},
						 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.StackTrace.StackFrames'(F1,
									[stack_frames
									 | Path],
									TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int64(F2, [stack_trace_hash_id | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.StackTrace'(X,
						 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.StackTrace'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.Module'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.Module'/3}).
'v_msg_google.devtools.cloudtrace.v2.Module'(#'google.devtools.cloudtrace.v2.Module'{module
											 =
											 F1,
										     build_id
											 =
											 F2},
					     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F1,
								   [module
								    | Path],
								   TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(F2,
								   [build_id
								    | Path],
								   TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.Module'(X, Path,
					     _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.Module'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.devtools.cloudtrace.v2.TruncatableString'/3}).
-dialyzer({nowarn_function,'v_msg_google.devtools.cloudtrace.v2.TruncatableString'/3}).
'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(#'google.devtools.cloudtrace.v2.TruncatableString'{value
													       =
													       F1,
													   truncated_byte_count
													       =
													       F2},
							Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [truncated_byte_count | Path],
			TrUserData)
    end,
    ok;
'v_msg_google.devtools.cloudtrace.v2.TruncatableString'(X,
							Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_google.protobuf.Timestamp'/3}).
-dialyzer({nowarn_function,'v_msg_google.protobuf.Timestamp'/3}).
'v_msg_google.protobuf.Timestamp'(#'google.protobuf.Timestamp'{seconds
								   = F1,
							       nanos = F2},
				  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
'v_msg_google.protobuf.Timestamp'(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'google.protobuf.Timestamp'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'/3}).
-dialyzer({nowarn_function,'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'/3}).
'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('TYPE_UNSPECIFIED',
									_Path,
									_TrUserData) ->
    ok;
'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('SENT',
									_Path,
									_TrUserData) ->
    ok;
'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('RECEIVED',
									_Path,
									_TrUserData) ->
    ok;
'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(V,
									Path,
									TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(X,
									Path,
									_TrUserData) ->
    mk_type_error({invalid_enum,
		   'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'/3}).
-dialyzer({nowarn_function,'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'/3}).
'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'('TYPE_UNSPECIFIED',
						      _Path, _TrUserData) ->
    ok;
'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'('CHILD_LINKED_SPAN',
						      _Path, _TrUserData) ->
    ok;
'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'('PARENT_LINKED_SPAN',
						      _Path, _TrUserData) ->
    ok;
'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(V,
						      Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_google.devtools.cloudtrace.v2.Span.Link.Type'(X,
						      Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'google.devtools.cloudtrace.v2.Span.Link.Type'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,google.devtools.cloudtrace.v2.AttributeValue>'/3}).
-dialyzer({nowarn_function,'v_map<string,google.devtools.cloudtrace.v2.AttributeValue>'/3}).
'v_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(KVs,
							     Path, TrUserData)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path], TrUserData),
	   'v_msg_google.devtools.cloudtrace.v2.AttributeValue'(Value,
								[value | Path],
								TrUserData);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,google.devtools.cloudtrace.v2.AttributeValue>'(X,
							     Path,
							     _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map[x]'/2}).
'tr_encode_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map[x]'(X,
									   _) ->
    mt_maptuple_to_pseudomsg_r(X,
			       'map<string,google.devtools.cloudtrace.v2.AttributeValue>').

-compile({inline,'tr_decode_init_default_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'/2}).
'tr_decode_init_default_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(_,
										     _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'/3}).
'tr_merge_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(X1,
								       X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'/2}).
'tr_decode_repeated_finalize_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(L,
											  _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'/3}).
'tr_decode_repeated_add_elem_google.devtools.cloudtrace.v2.Span.Attributes.attribute_map'(Elem,
											  L,
											  _) ->
    mt_add_item_r_verify_value(Elem, L).

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> dict:new().

-compile({inline,mt_add_item_r_verify_value/2}).
mt_add_item_r_verify_value({_, _, undefined}, _) ->
    error({gpb_error, missing_value});
mt_add_item_r_verify_value({_RName, K, V}, D) ->
    dict:store(K, V, D).


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).



get_msg_defs() ->
    [{{enum,
       'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'},
      [{'TYPE_UNSPECIFIED', 0}, {'SENT', 1},
       {'RECEIVED', 2}]},
     {{enum, 'google.devtools.cloudtrace.v2.Span.Link.Type'},
      [{'TYPE_UNSPECIFIED', 0}, {'CHILD_LINKED_SPAN', 1},
       {'PARENT_LINKED_SPAN', 2}]},
     {{enum, 'google.devtools.cloudtrace.v2.Span.SpanKind'},
      [{'SPAN_KIND_UNSPECIFIED', 0}, {'INTERNAL', 1},
       {'SERVER', 2}, {'CLIENT', 3}, {'PRODUCER', 4},
       {'CONSUMER', 5}]},
     {{msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
      [#field{name = attribute_map, fnum = 1, rnum = 2,
	      type =
		  {map, string,
		   {msg, 'google.devtools.cloudtrace.v2.AttributeValue'}},
	      occurrence = repeated, opts = []},
       #field{name = dropped_attributes_count, fnum = 2,
	      rnum = 3, type = int32, occurrence = optional,
	      opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.Span.TimeEvent'},
      [#field{name = time, fnum = 1, rnum = 2,
	      type = {msg, 'google.protobuf.Timestamp'},
	      occurrence = optional, opts = []},
       #gpb_oneof{name = value, rnum = 3,
		  fields =
		      [#field{name = annotation, fnum = 2, rnum = 3,
			      type =
				  {msg,
				   'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'},
			      occurrence = optional, opts = []},
		       #field{name = message_event, fnum = 3, rnum = 3,
			      type =
				  {msg,
				   'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'},
			      occurrence = optional, opts = []}]}]},
     {{msg,
       'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type =
		  {enum,
		   'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'},
	      occurrence = optional, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = uncompressed_size_bytes, fnum = 3,
	      rnum = 4, type = int64, occurrence = optional,
	      opts = []},
       #field{name = compressed_size_bytes, fnum = 4, rnum = 5,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg,
       'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'},
      [#field{name = description, fnum = 1, rnum = 2,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []},
       #field{name = attributes, fnum = 2, rnum = 3,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
	      occurrence = optional, opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.Span.TimeEvents'},
      [#field{name = time_event, fnum = 1, rnum = 2,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.Span.TimeEvent'},
	      occurrence = repeated, opts = []},
       #field{name = dropped_annotations_count, fnum = 2,
	      rnum = 3, type = int32, occurrence = optional,
	      opts = []},
       #field{name = dropped_message_events_count, fnum = 3,
	      rnum = 4, type = int32, occurrence = optional,
	      opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.Span.Link'},
      [#field{name = trace_id, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = span_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = type, fnum = 3, rnum = 4,
	      type =
		  {enum, 'google.devtools.cloudtrace.v2.Span.Link.Type'},
	      occurrence = optional, opts = []},
       #field{name = attributes, fnum = 4, rnum = 5,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
	      occurrence = optional, opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.Span.Links'},
      [#field{name = link, fnum = 1, rnum = 2,
	      type = {msg, 'google.devtools.cloudtrace.v2.Span.Link'},
	      occurrence = repeated, opts = []},
       #field{name = dropped_links_count, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.Span'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional,
	      opts =
		  [{[google, '.', api, '.', field_behavior],
		    'REQUIRED'}]},
       #field{name = span_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional,
	      opts =
		  [{[google, '.', api, '.', field_behavior],
		    'REQUIRED'}]},
       #field{name = parent_span_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = display_name, fnum = 4, rnum = 5,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional,
	      opts =
		  [{[google, '.', api, '.', field_behavior],
		    'REQUIRED'}]},
       #field{name = start_time, fnum = 5, rnum = 6,
	      type = {msg, 'google.protobuf.Timestamp'},
	      occurrence = optional,
	      opts =
		  [{[google, '.', api, '.', field_behavior],
		    'REQUIRED'}]},
       #field{name = end_time, fnum = 6, rnum = 7,
	      type = {msg, 'google.protobuf.Timestamp'},
	      occurrence = optional,
	      opts =
		  [{[google, '.', api, '.', field_behavior],
		    'REQUIRED'}]},
       #field{name = attributes, fnum = 7, rnum = 8,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
	      occurrence = optional, opts = []},
       #field{name = stack_trace, fnum = 8, rnum = 9,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.StackTrace'},
	      occurrence = optional, opts = []},
       #field{name = time_events, fnum = 9, rnum = 10,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.Span.TimeEvents'},
	      occurrence = optional, opts = []},
       #field{name = links, fnum = 10, rnum = 11,
	      type =
		  {msg, 'google.devtools.cloudtrace.v2.Span.Links'},
	      occurrence = optional, opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.AttributeValue'},
      [#gpb_oneof{name = value, rnum = 2,
		  fields =
		      [#field{name = string_value, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'google.devtools.cloudtrace.v2.TruncatableString'},
			      occurrence = optional, opts = []},
		       #field{name = int_value, fnum = 2, rnum = 2,
			      type = int64, occurrence = optional, opts = []},
		       #field{name = bool_value, fnum = 3, rnum = 2,
			      type = bool, occurrence = optional,
			      opts = []}]}]},
     {{msg,
       'google.devtools.cloudtrace.v2.StackTrace.StackFrame'},
      [#field{name = function_name, fnum = 1, rnum = 2,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []},
       #field{name = original_function_name, fnum = 2,
	      rnum = 3,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []},
       #field{name = file_name, fnum = 3, rnum = 4,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []},
       #field{name = line_number, fnum = 4, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = column_number, fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []},
       #field{name = load_module, fnum = 6, rnum = 7,
	      type = {msg, 'google.devtools.cloudtrace.v2.Module'},
	      occurrence = optional, opts = []},
       #field{name = source_version, fnum = 7, rnum = 8,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []}]},
     {{msg,
       'google.devtools.cloudtrace.v2.StackTrace.StackFrames'},
      [#field{name = frame, fnum = 1, rnum = 2,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.StackTrace.StackFrame'},
	      occurrence = repeated, opts = []},
       #field{name = dropped_frames_count, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.StackTrace'},
      [#field{name = stack_frames, fnum = 1, rnum = 2,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.StackTrace.StackFrames'},
	      occurrence = optional, opts = []},
       #field{name = stack_trace_hash_id, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'google.devtools.cloudtrace.v2.Module'},
      [#field{name = module, fnum = 1, rnum = 2,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []},
       #field{name = build_id, fnum = 2, rnum = 3,
	      type =
		  {msg,
		   'google.devtools.cloudtrace.v2.TruncatableString'},
	      occurrence = optional, opts = []}]},
     {{msg,
       'google.devtools.cloudtrace.v2.TruncatableString'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = truncated_byte_count, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []}]},
     {{msg, 'google.protobuf.Timestamp'},
      [#field{name = seconds, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = nanos, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['google.devtools.cloudtrace.v2.Span.Attributes',
     'google.devtools.cloudtrace.v2.Span.TimeEvent',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation',
     'google.devtools.cloudtrace.v2.Span.TimeEvents',
     'google.devtools.cloudtrace.v2.Span.Link',
     'google.devtools.cloudtrace.v2.Span.Links',
     'google.devtools.cloudtrace.v2.Span',
     'google.devtools.cloudtrace.v2.AttributeValue',
     'google.devtools.cloudtrace.v2.StackTrace.StackFrame',
     'google.devtools.cloudtrace.v2.StackTrace.StackFrames',
     'google.devtools.cloudtrace.v2.StackTrace',
     'google.devtools.cloudtrace.v2.Module',
     'google.devtools.cloudtrace.v2.TruncatableString',
     'google.protobuf.Timestamp'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['google.devtools.cloudtrace.v2.Span.Attributes',
     'google.devtools.cloudtrace.v2.Span.TimeEvent',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation',
     'google.devtools.cloudtrace.v2.Span.TimeEvents',
     'google.devtools.cloudtrace.v2.Span.Link',
     'google.devtools.cloudtrace.v2.Span.Links',
     'google.devtools.cloudtrace.v2.Span',
     'google.devtools.cloudtrace.v2.AttributeValue',
     'google.devtools.cloudtrace.v2.StackTrace.StackFrame',
     'google.devtools.cloudtrace.v2.StackTrace.StackFrames',
     'google.devtools.cloudtrace.v2.StackTrace',
     'google.devtools.cloudtrace.v2.Module',
     'google.devtools.cloudtrace.v2.TruncatableString',
     'google.protobuf.Timestamp'].


get_enum_names() ->
    ['google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type',
     'google.devtools.cloudtrace.v2.Span.Link.Type',
     'google.devtools.cloudtrace.v2.Span.SpanKind'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('google.devtools.cloudtrace.v2.Span.Attributes') ->
    [#field{name = attribute_map, fnum = 1, rnum = 2,
	    type =
		{map, string,
		 {msg, 'google.devtools.cloudtrace.v2.AttributeValue'}},
	    occurrence = repeated, opts = []},
     #field{name = dropped_attributes_count, fnum = 2,
	    rnum = 3, type = int32, occurrence = optional,
	    opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Span.TimeEvent') ->
    [#field{name = time, fnum = 1, rnum = 2,
	    type = {msg, 'google.protobuf.Timestamp'},
	    occurrence = optional, opts = []},
     #gpb_oneof{name = value, rnum = 3,
		fields =
		    [#field{name = annotation, fnum = 2, rnum = 3,
			    type =
				{msg,
				 'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation'},
			    occurrence = optional, opts = []},
		     #field{name = message_event, fnum = 3, rnum = 3,
			    type =
				{msg,
				 'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent'},
			    occurrence = optional, opts = []}]}];
find_msg_def('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type =
		{enum,
		 'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'},
	    occurrence = optional, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = uncompressed_size_bytes, fnum = 3,
	    rnum = 4, type = int64, occurrence = optional,
	    opts = []},
     #field{name = compressed_size_bytes, fnum = 4, rnum = 5,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation') ->
    [#field{name = description, fnum = 1, rnum = 2,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []},
     #field{name = attributes, fnum = 2, rnum = 3,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
	    occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Span.TimeEvents') ->
    [#field{name = time_event, fnum = 1, rnum = 2,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.Span.TimeEvent'},
	    occurrence = repeated, opts = []},
     #field{name = dropped_annotations_count, fnum = 2,
	    rnum = 3, type = int32, occurrence = optional,
	    opts = []},
     #field{name = dropped_message_events_count, fnum = 3,
	    rnum = 4, type = int32, occurrence = optional,
	    opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Span.Link') ->
    [#field{name = trace_id, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = span_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = type, fnum = 3, rnum = 4,
	    type =
		{enum, 'google.devtools.cloudtrace.v2.Span.Link.Type'},
	    occurrence = optional, opts = []},
     #field{name = attributes, fnum = 4, rnum = 5,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
	    occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Span.Links') ->
    [#field{name = link, fnum = 1, rnum = 2,
	    type = {msg, 'google.devtools.cloudtrace.v2.Span.Link'},
	    occurrence = repeated, opts = []},
     #field{name = dropped_links_count, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Span') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional,
	    opts =
		[{[google, '.', api, '.', field_behavior],
		  'REQUIRED'}]},
     #field{name = span_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional,
	    opts =
		[{[google, '.', api, '.', field_behavior],
		  'REQUIRED'}]},
     #field{name = parent_span_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = display_name, fnum = 4, rnum = 5,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional,
	    opts =
		[{[google, '.', api, '.', field_behavior],
		  'REQUIRED'}]},
     #field{name = start_time, fnum = 5, rnum = 6,
	    type = {msg, 'google.protobuf.Timestamp'},
	    occurrence = optional,
	    opts =
		[{[google, '.', api, '.', field_behavior],
		  'REQUIRED'}]},
     #field{name = end_time, fnum = 6, rnum = 7,
	    type = {msg, 'google.protobuf.Timestamp'},
	    occurrence = optional,
	    opts =
		[{[google, '.', api, '.', field_behavior],
		  'REQUIRED'}]},
     #field{name = attributes, fnum = 7, rnum = 8,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.Span.Attributes'},
	    occurrence = optional, opts = []},
     #field{name = stack_trace, fnum = 8, rnum = 9,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.StackTrace'},
	    occurrence = optional, opts = []},
     #field{name = time_events, fnum = 9, rnum = 10,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.Span.TimeEvents'},
	    occurrence = optional, opts = []},
     #field{name = links, fnum = 10, rnum = 11,
	    type =
		{msg, 'google.devtools.cloudtrace.v2.Span.Links'},
	    occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.AttributeValue') ->
    [#gpb_oneof{name = value, rnum = 2,
		fields =
		    [#field{name = string_value, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'google.devtools.cloudtrace.v2.TruncatableString'},
			    occurrence = optional, opts = []},
		     #field{name = int_value, fnum = 2, rnum = 2,
			    type = int64, occurrence = optional, opts = []},
		     #field{name = bool_value, fnum = 3, rnum = 2,
			    type = bool, occurrence = optional, opts = []}]}];
find_msg_def('google.devtools.cloudtrace.v2.StackTrace.StackFrame') ->
    [#field{name = function_name, fnum = 1, rnum = 2,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []},
     #field{name = original_function_name, fnum = 2,
	    rnum = 3,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []},
     #field{name = file_name, fnum = 3, rnum = 4,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []},
     #field{name = line_number, fnum = 4, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = column_number, fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []},
     #field{name = load_module, fnum = 6, rnum = 7,
	    type = {msg, 'google.devtools.cloudtrace.v2.Module'},
	    occurrence = optional, opts = []},
     #field{name = source_version, fnum = 7, rnum = 8,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.StackTrace.StackFrames') ->
    [#field{name = frame, fnum = 1, rnum = 2,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.StackTrace.StackFrame'},
	    occurrence = repeated, opts = []},
     #field{name = dropped_frames_count, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.StackTrace') ->
    [#field{name = stack_frames, fnum = 1, rnum = 2,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.StackTrace.StackFrames'},
	    occurrence = optional, opts = []},
     #field{name = stack_trace_hash_id, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.Module') ->
    [#field{name = module, fnum = 1, rnum = 2,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []},
     #field{name = build_id, fnum = 2, rnum = 3,
	    type =
		{msg,
		 'google.devtools.cloudtrace.v2.TruncatableString'},
	    occurrence = optional, opts = []}];
find_msg_def('google.devtools.cloudtrace.v2.TruncatableString') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = truncated_byte_count, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def('google.protobuf.Timestamp') ->
    [#field{name = seconds, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = nanos, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type') ->
    [{'TYPE_UNSPECIFIED', 0}, {'SENT', 1}, {'RECEIVED', 2}];
find_enum_def('google.devtools.cloudtrace.v2.Span.Link.Type') ->
    [{'TYPE_UNSPECIFIED', 0}, {'CHILD_LINKED_SPAN', 1},
     {'PARENT_LINKED_SPAN', 2}];
find_enum_def('google.devtools.cloudtrace.v2.Span.SpanKind') ->
    [{'SPAN_KIND_UNSPECIFIED', 0}, {'INTERNAL', 1},
     {'SERVER', 2}, {'CLIENT', 3}, {'PRODUCER', 4},
     {'CONSUMER', 5}];
find_enum_def(_) -> error.


enum_symbol_by_value('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type',
		     Value) ->
    'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(Value);
enum_symbol_by_value('google.devtools.cloudtrace.v2.Span.Link.Type',
		     Value) ->
    'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.Link.Type'(Value);
enum_symbol_by_value('google.devtools.cloudtrace.v2.Span.SpanKind',
		     Value) ->
    'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(Value).


enum_value_by_symbol('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type',
		     Sym) ->
    'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(Sym);
enum_value_by_symbol('google.devtools.cloudtrace.v2.Span.Link.Type',
		     Sym) ->
    'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.Link.Type'(Sym);
enum_value_by_symbol('google.devtools.cloudtrace.v2.Span.SpanKind',
		     Sym) ->
    'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'(Sym).


'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(0) ->
    'TYPE_UNSPECIFIED';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(1) ->
    'SENT';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'(2) ->
    'RECEIVED'.


'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('TYPE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('SENT') ->
    1;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'('RECEIVED') ->
    2.

'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.Link.Type'(0) ->
    'TYPE_UNSPECIFIED';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.Link.Type'(1) ->
    'CHILD_LINKED_SPAN';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.Link.Type'(2) ->
    'PARENT_LINKED_SPAN'.


'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.Link.Type'('TYPE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.Link.Type'('CHILD_LINKED_SPAN') ->
    1;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.Link.Type'('PARENT_LINKED_SPAN') ->
    2.

'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(0) ->
    'SPAN_KIND_UNSPECIFIED';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(1) ->
    'INTERNAL';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(2) ->
    'SERVER';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(3) ->
    'CLIENT';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(4) ->
    'PRODUCER';
'enum_symbol_by_value_google.devtools.cloudtrace.v2.Span.SpanKind'(5) ->
    'CONSUMER'.


'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'('SPAN_KIND_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'('INTERNAL') ->
    1;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'('SERVER') ->
    2;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'('CLIENT') ->
    3;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'('PRODUCER') ->
    4;
'enum_value_by_symbol_google.devtools.cloudtrace.v2.Span.SpanKind'('CONSUMER') ->
    5.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.Attributes">>) ->
    'google.devtools.cloudtrace.v2.Span.Attributes';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.TimeEvent">>) ->
    'google.devtools.cloudtrace.v2.Span.TimeEvent';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent">>) ->
    'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation">>) ->
    'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.TimeEvents">>) ->
    'google.devtools.cloudtrace.v2.Span.TimeEvents';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.Link">>) ->
    'google.devtools.cloudtrace.v2.Span.Link';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span.Links">>) ->
    'google.devtools.cloudtrace.v2.Span.Links';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Span">>) ->
    'google.devtools.cloudtrace.v2.Span';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.AttributeValue">>) ->
    'google.devtools.cloudtrace.v2.AttributeValue';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.StackTrace.StackFrame">>) ->
    'google.devtools.cloudtrace.v2.StackTrace.StackFrame';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.StackTrace.StackFrames">>) ->
    'google.devtools.cloudtrace.v2.StackTrace.StackFrames';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.StackTrace">>) ->
    'google.devtools.cloudtrace.v2.StackTrace';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.Module">>) ->
    'google.devtools.cloudtrace.v2.Module';
fqbin_to_msg_name(<<"google.devtools.cloudtrace.v2.TruncatableString">>) ->
    'google.devtools.cloudtrace.v2.TruncatableString';
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) ->
    'google.protobuf.Timestamp';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.Attributes') ->
    <<"google.devtools.cloudtrace.v2.Span.Attributes">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.TimeEvent') ->
    <<"google.devtools.cloudtrace.v2.Span.TimeEvent">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent') ->
    <<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation') ->
    <<"google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.TimeEvents') ->
    <<"google.devtools.cloudtrace.v2.Span.TimeEvents">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.Link') ->
    <<"google.devtools.cloudtrace.v2.Span.Link">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span.Links') ->
    <<"google.devtools.cloudtrace.v2.Span.Links">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Span') ->
    <<"google.devtools.cloudtrace.v2.Span">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.AttributeValue') ->
    <<"google.devtools.cloudtrace.v2.AttributeValue">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.StackTrace.StackFrame') ->
    <<"google.devtools.cloudtrace.v2.StackTrace.StackFrame">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.StackTrace.StackFrames') ->
    <<"google.devtools.cloudtrace.v2.StackTrace.StackFrames">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.StackTrace') ->
    <<"google.devtools.cloudtrace.v2.StackTrace">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.Module') ->
    <<"google.devtools.cloudtrace.v2.Module">>;
msg_name_to_fqbin('google.devtools.cloudtrace.v2.TruncatableString') ->
    <<"google.devtools.cloudtrace.v2.TruncatableString">>;
msg_name_to_fqbin('google.protobuf.Timestamp') ->
    <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type">>) ->
    'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type';
fqbin_to_enum_name(<<"google.devtools.cloudtrace.v2.Span.Link.Type">>) ->
    'google.devtools.cloudtrace.v2.Span.Link.Type';
fqbin_to_enum_name(<<"google.devtools.cloudtrace.v2.Span.SpanKind">>) ->
    'google.devtools.cloudtrace.v2.Span.SpanKind';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type') ->
    <<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type">>;
enum_name_to_fqbin('google.devtools.cloudtrace.v2.Span.Link.Type') ->
    <<"google.devtools.cloudtrace.v2.Span.Link.Type">>;
enum_name_to_fqbin('google.devtools.cloudtrace.v2.Span.SpanKind') ->
    <<"google.devtools.cloudtrace.v2.Span.SpanKind">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'google.devtools.cloudtrace.v2'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "trace.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["trace.proto", "timestamp.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["trace", "timestamp"].


get_msg_containment("trace") ->
    ['google.devtools.cloudtrace.v2.AttributeValue',
     'google.devtools.cloudtrace.v2.Module',
     'google.devtools.cloudtrace.v2.Span',
     'google.devtools.cloudtrace.v2.Span.Attributes',
     'google.devtools.cloudtrace.v2.Span.Link',
     'google.devtools.cloudtrace.v2.Span.Links',
     'google.devtools.cloudtrace.v2.Span.TimeEvent',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent',
     'google.devtools.cloudtrace.v2.Span.TimeEvents',
     'google.devtools.cloudtrace.v2.StackTrace',
     'google.devtools.cloudtrace.v2.StackTrace.StackFrame',
     'google.devtools.cloudtrace.v2.StackTrace.StackFrames',
     'google.devtools.cloudtrace.v2.TruncatableString'];
get_msg_containment("timestamp") ->
    ['google.protobuf.Timestamp'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("trace") ->
    'google.devtools.cloudtrace.v2';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("trace") -> [];
get_service_containment("timestamp") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("trace") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("trace") ->
    ['google.devtools.cloudtrace.v2.Span.Link.Type',
     'google.devtools.cloudtrace.v2.Span.SpanKind',
     'google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type'];
get_enum_containment("timestamp") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.StackTrace.StackFrames">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.TimeEvents">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.Links">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.Attributes">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.TimeEvent">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.StackTrace.StackFrame">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.StackTrace">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Module">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.AttributeValue">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.TruncatableString">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.Link">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span">>) -> "trace";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.SpanKind">>) -> "trace";
get_proto_by_enum_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type">>) -> "trace";
get_proto_by_enum_name_as_fqbin(<<"google.devtools.cloudtrace.v2.Span.Link.Type">>) -> "trace";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"google.devtools.cloudtrace.v2">>) -> ["trace"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["timestamp"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.8.0".

gpb_version_as_list() ->
    [4,8,0].
